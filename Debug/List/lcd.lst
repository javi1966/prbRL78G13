###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.10.4.30019 [Kickstart] for RL78 27/Jul/2012  19:39:39 #
# Copyright 2011 IAR Systems AB.                                              #
#                                                                             #
#    Core         =  rl78_1                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  D:\DESARROLLOS\prbRL78G13\lcd.c                          #
#    Command line =  D:\DESARROLLOS\prbRL78G13\lcd.c --core rl78_1            #
#                    --code_model near --data_model near                      #
#                    --near_const_location rom0 -o                            #
#                    D:\DESARROLLOS\prbRL78G13\Debug\Obj\ --dlib_config       #
#                    "D:\Archivos de programa\IAR Systems\Embedded Workbench  #
#                    6.0 Kickstart\rl78\LIB\dlrl78nn1n.h" -e -Ol --no_cse     #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --debug -lCN D:\DESARROLLOS\prbRL78G13\Debug\List\ -I    #
#                    D:\DESARROLLOS\prbRL78G13\user_include\                  #
#    List file    =  D:\DESARROLLOS\prbRL78G13\Debug\List\lcd.lst             #
#    Object file  =  D:\DESARROLLOS\prbRL78G13\Debug\Obj\lcd.r87              #
#                                                                             #
#                                                                             #
###############################################################################

D:\DESARROLLOS\prbRL78G13\lcd.c
      1          #include <stdint.h>
      2          #include <string.h>
      3          #include <stdio.h>
      4          #include <stdarg.h>
      5          
      6          #include "ior5f100le.h"

   \                                 In  segment SADDR_A, at 0xfff01
   \   union <unnamed> volatile __saddr _A_P1
   \                     _A_P1:
   \   000000                       DS 1

   \                                 In  segment NEAR_A, at 0xfff21
   \   union <unnamed> volatile __sfr _A_PM1
   \                     _A_PM1:
   \   000000                       DS 1
      7          #include "ior5f100le_ext.h"
      8          
      9          #include "lcd.h"
     10          #include "spi.h"
     11          
     12          extern volatile unsigned char G_SPI_SendingData; //spi busy flag
     13          extern volatile unsigned char G_SPI_ReceivingData; //spi busy flag
     14          
     15          
     16          /*-------------------------------------------------------------------------*
     17           * Globals
     18           *-------------------------------------------------------------------------*/
     19          

   \                                 In  segment NEAR_I, align 2, align-sorted
     20          int G_CharWidth = 5u;
   \                     G_CharWidth:
   \   000000                       DS 2
   \   000002                       REQUIRE `?<Initializer for G_CharWidth>`
   \   000002                       REQUIRE __INIT_NEAR_I

   \                                 In  segment NEAR_I, align 2, align-sorted
     21          int G_CharHeight = 7u;
   \                     G_CharHeight:
   \   000000                       DS 2
   \   000002                       REQUIRE `?<Initializer for G_CharHeight>`
   \   000002                       REQUIRE __INIT_NEAR_I

   \                                 In  segment NEAR_Z, align 2, align-sorted
     22          const unsigned char ** iFont;
   \                     iFont:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     23          int CharX_Position;
   \                     CharX_Position:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     24          int CharY_Position;
   \                     CharY_Position:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     25          uint32_t CharX2_Position;
   \                     CharX2_Position:
   \   000000                       DS 4
   \   000004                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     26          uint32_t CharY2_Position;
   \                     CharY2_Position:
   \   000000                       DS 4
   \   000004                       REQUIRE __INIT_NEAR_Z
     27          
     28          
     29          
     30          //************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
     31          void SPI_Send( unsigned char *aData, unsigned long aLength)
   \                     SPI_Send:
     32          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C3                    PUSH      BC
   \   000001 C5                    PUSH      DE
   \   000002 C1                    PUSH      AX
   \   000003                       ; Auto size: 4
   \   000003 C1                    PUSH      AX
   \   000004 AEF8                  MOVW      AX, SP
   \   000006 040C00                ADDW      AX, #0xC
   \   000009 16                    MOVW      HL, AX
   \   00000A AC02                  MOVW      AX, [HL+0x02]
   \   00000C 12                    MOVW      BC, AX
   \   00000D AB                    MOVW      AX, [HL]
     33            unsigned char noRXData;
     34            
     35          	G_SPI_SendingData = 1;
   \   00000E E5....                ONEB      N:G_SPI_SendingData
     36          	G_SPI_ReceivingData = 0;
   \   000011 F5....                CLRB      N:G_SPI_ReceivingData
     37                  
     38                  P1  &= ~(1<<0);  //CS -> P10 low
   \   000014 710301                CLR1      S:0xFFF01.0
     39          	
     40          	
     41          
     42                  spi10_SendReceiveData(aData, aLength, &noRXData);
   \   000017 EBF8FF                MOVW      DE, SP
   \   00001A 12                    MOVW      BC, AX
   \   00001B A802                  MOVW      AX, [SP+0x02]
   \   00001D FD....                CALL      spi10_SendReceiveData
     43                  while(G_SPI_SendingData);
   \                     ??SPI_Send_0:
   \   000020 D5....                CMP0      N:G_SPI_SendingData
   \   000023 DFFB                  BNZ       ??SPI_Send_0
     44                  
     45                  P1 |= (1<<0);   //CS -> P10 high
   \   000025 710201                SET1      S:0xFFF01.0
     46              
     47              
     48            
     49          }
   \   000028 1004                  ADDW      SP, #0x4
   \   00002A C4                    POP       DE
   \   00002B C2                    POP       BC
   \   00002C FD....                CALL      N:?FUNC_LEAVE_L06
   \   00002F 0400                  DW        0x4
   \   000031                       REQUIRE ?CLRL78_V1_0_L00
   \   000031                       REQUIRE _A_P1
     50          //************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
     51          void SPI_SendReceive(uint8_t *aTXData, uint32_t aTXLength, uint8_t *aRXData)
   \                     SPI_SendReceive:
     52          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 4
   \   000000 C5                    PUSH      DE
   \   000001 C1                    PUSH      AX
   \   000002                       ; Auto size: 2
   \   000002 C3                    PUSH      BC
   \   000003 C4                    POP       DE
   \   000004 AEF8                  MOVW      AX, SP
   \   000006 040800                ADDW      AX, #0x8
   \   000009 16                    MOVW      HL, AX
   \   00000A AC02                  MOVW      AX, [HL+0x02]
   \   00000C 12                    MOVW      BC, AX
   \   00000D AB                    MOVW      AX, [HL]
     53            
     54                  G_SPI_SendingData = 1;
   \   00000E E5....                ONEB      N:G_SPI_SendingData
     55          	G_SPI_ReceivingData = 1;
   \   000011 E5....                ONEB      N:G_SPI_ReceivingData
     56          	
     57          	 P1  &= ~(1<<0);  //CS -> P10 low
   \   000014 710301                CLR1      S:0xFFF01.0
     58          	
     59              //RMM delay_ms(1);
     60              
     61                  spi10_SendReceiveData(aTXData, aTXLength, aRXData);
   \   000017 12                    MOVW      BC, AX
   \   000018 A800                  MOVW      AX, [SP]
   \   00001A FD....                CALL      spi10_SendReceiveData
     62                  while(G_SPI_SendingData || G_SPI_ReceivingData);
   \                     ??SPI_SendReceive_0:
   \   00001D D5....                CMP0      N:G_SPI_SendingData
   \   000020 DFFB                  BNZ       ??SPI_SendReceive_0
   \   000022 D5....                CMP0      N:G_SPI_ReceivingData
   \   000025 DFF6                  BNZ       ??SPI_SendReceive_0
     63              
     64          	 P1 |= (1<<0);   //CS -> P10 high
   \   000027 710201                SET1      S:0xFFF01.0
     65          } 
   \   00002A 1002                  ADDW      SP, #0x2
   \   00002C C4                    POP       DE
   \   00002D FD....                CALL      N:?FUNC_LEAVE_L06
   \   000030 0400                  DW        0x4
   \   000032                       REQUIRE ?CLRL78_V1_0_L00
   \   000032                       REQUIRE _A_P1
     66          //***********************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
     67          void CommandSend( uint8_t cCommand)
   \                     CommandSend:
     68          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001 C5                    PUSH      DE
   \   000002 C1                    PUSH      AX
   \   000003                       ; Auto size: 4
   \   000003 C1                    PUSH      AX
     69             //P1 &= ~(1<<5); // Assert P15 (LCD RS)
     70             //SPI_Send((unsigned char *)&cCommand, 1);
     71             //P1 |= (1<<5); // Deassert P15 (LCD RS)
     72             
     73             
     74              uint8_t dummyRX;
     75              
     76              P1 &= ~(1<<5);      // Assert P15 (LCD RS)
   \   000004 715301                CLR1      S:0xFFF01.5
     77              P1 &= ~(1<<0);      // Assert P10 (LCD CS)
   \   000007 710301                CLR1      S:0xFFF01.0
     78          
     79              spi10_SendReceiveData( (uint8_t *)&cCommand, 1, &dummyRX);
   \   00000A AEF8                  MOVW      AX, SP
   \   00000C 14                    MOVW      DE, AX
   \   00000D E7                    ONEW      BC
   \   00000E AEF8                  MOVW      AX, SP
   \   000010 040300                ADDW      AX, #0x3
   \   000013 FD....                CALL      spi10_SendReceiveData
     80              while(G_SPI_SendingData );
   \                     ??CommandSend_0:
   \   000016 D5....                CMP0      N:G_SPI_SendingData
   \   000019 DFFB                  BNZ       ??CommandSend_0
     81             // CSIMK10 = 1U;       // disable INTCSI10 interrupt
     82             // SIO10 = cCommand;   // started by writing data to SDR[7:0]
     83              
     84                                  // Short Delay
     85             // for(delay=0; delay<5; delay++); 
     86              
     87                                 
     88               
     89            //  while(SSR02 & 0x0040U); // Wait for transmission end
     90                                  // Short Delay
     91              
     92              
     93                               
     94            
     95              
     96              P1 |= (1<<0);       // Deassert P10 (LCD CS)
   \   00001B 710201                SET1      S:0xFFF01.0
     97              
     98             // SPI_SendReceive((uint8_t *)&cCommand,1, (uint8_t *)&dummyRX);
     99              
    100              P1 |= (1<<5);       // Deassert P15 (LCD RS)
   \   00001E 715201                SET1      S:0xFFF01.5
    101            
    102          }  
   \   000021 1004                  ADDW      SP, #0x4
   \   000023 C4                    POP       DE
   \   000024 C2                    POP       BC
   \   000025 D7                    RET       
   \   000026                       REQUIRE ?CLRL78_V1_0_L00
   \   000026                       REQUIRE _A_P1
    103          //************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    104          void DataSend(uint8_t cData)
   \                     DataSend:
    105          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001 C5                    PUSH      DE
   \   000002 C1                    PUSH      AX
   \   000003                       ; Auto size: 4
   \   000003 C1                    PUSH      AX
    106            //  P1 |= (1<<5); // Deassert P15 (LCD RS)
    107          
    108            //  SPI_Send((unsigned char *)&cData, 1);
    109          
    110            //  P1 |= (1<<5); // Deassert P15 (LCD RS)
    111             
    112              uint8_t dummyRX;
    113              
    114              P1 &= ~(1<<0);  // Assert P10 (LCD CS)
   \   000004 710301                CLR1      S:0xFFF01.0
    115              
    116              
    117              
    118              spi10_SendReceiveData( (uint8_t *)&cData, 1, &dummyRX);
   \   000007 AEF8                  MOVW      AX, SP
   \   000009 14                    MOVW      DE, AX
   \   00000A E7                    ONEW      BC
   \   00000B AEF8                  MOVW      AX, SP
   \   00000D 040300                ADDW      AX, #0x3
   \   000010 FD....                CALL      spi10_SendReceiveData
    119              while(G_SPI_SendingData );
   \                     ??DataSend_0:
   \   000013 D5....                CMP0      N:G_SPI_SendingData
   \   000016 DFFB                  BNZ       ??DataSend_0
    120          
    121              //spi10_SendReceiveData((unsigned char *)&cData, 1, &dummyRX);
    122             
    123                                  // Wait for transmission end
    124              //while(SSR02 & 0x0040U); 
    125              
    126             // CSIMK10 = 1U;       // disable INTCSI10 interrupt
    127             // SIO10 = cData;       // started by writing data to SDR[7:0]
    128              
    129                                  // Short Delay
    130             // for(delay=0; delay<5; delay++); 
    131              
    132                                  // Wait for transmission end
    133             // while(SSR02 & 0x0040); 
    134              
    135              
    136              
    137              P1 |= (1<<0);       // Deassert P10 (LCD CS)
   \   000018 710201                SET1      S:0xFFF01.0
    138              
    139              //SPI_SendReceive((uint8_t *)&cData,1, (uint8_t *)&dummyRX);
    140            
    141            
    142          } 
   \   00001B 1004                  ADDW      SP, #0x4
   \   00001D C4                    POP       DE
   \   00001E C2                    POP       BC
   \   00001F D7                    RET       
   \   000020                       REQUIRE ?CLRL78_V1_0_L00
   \   000020                       REQUIRE _A_P1
    143          //************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    144          void ST7579_SetVO_Range(int32_t nValue0to254)
   \                     ST7579_SetVO_Range:
    145          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE
   \   000001 C3                    PUSH      BC
   \   000002 C1                    PUSH      AX
   \   000003                       ; Auto size: 4
    146             
    147          
    148              if (nValue0to254 <= 254) {
   \   000003 F6                    CLRW      AX
   \   000004 C1                    PUSH      AX
   \   000005 30FF00                MOVW      AX, #0xFF
   \   000008 C1                    PUSH      AX
   \   000009 A806                  MOVW      AX, [SP+0x06]
   \   00000B 12                    MOVW      BC, AX
   \   00000C A804                  MOVW      AX, [SP+0x04]
   \   00000E FD....                CALL      N:?SL_CMP_L03
   \   000011 DE47                  BNC       ??LCDEraseBlock_0
    149                  char cByteToSend = 0 ;
   \   000013 5400                  MOV       E, #0x0
    150                  char cLowHigh = 0 ;
   \   000015 5500                  MOV       D, #0x0
    151          
    152                  if (nValue0to254 > 127) {
   \   000017 F6                    CLRW      AX
   \   000018 C1                    PUSH      AX
   \   000019 308000                MOVW      AX, #0x80
   \   00001C C1                    PUSH      AX
   \   00001D A806                  MOVW      AX, [SP+0x06]
   \   00001F 12                    MOVW      BC, AX
   \   000020 A804                  MOVW      AX, [SP+0x04]
   \   000022 FD....                CALL      N:?SL_CMP_L03
   \   000025 DC0B                  BC        ??LCDEraseBlock_1
    153                      cByteToSend = ((nValue0to254 - 127) | 0x80) & 0x00FF ;
   \   000027 8800                  MOV       A, [SP]
   \   000029 0C81                  ADD       A, #0x81
   \   00002B 6C80                  OR        A, #0x80
   \   00002D 74                    MOV       E, A
    154                      cLowHigh = 1 ;
   \   00002E 5501                  MOV       D, #0x1
   \   000030 EF05                  BR        S:??LCDEraseBlock_2
    155                  }
    156                  else {
    157                      cByteToSend = (nValue0to254 | 0x80) & 0x00FF ;
   \                     ??LCDEraseBlock_1:
   \   000032 8800                  MOV       A, [SP]
   \   000034 6C80                  OR        A, #0x80
   \   000036 74                    MOV       E, A
    158                  }
    159          
    160                  /* Use Function Set 0 H[1:0]=(0,0) */
    161                  /* Original Development hardcoded this as CommandSend(0x020) */
    162                  CommandSend(LCD_FUNCTION_ZERO);
   \                     ??LCDEraseBlock_2:
   \   000037 5128                  MOV       A, #0x28
   \   000039 FD....                CALL      CommandSend
    163                 // p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ZERO) ;
    164                  /* Set VO range to Low if 0x04 or High if 0x05 */
    165                  /* here low would be PRS=0 and high would be PRS=1 */
    166                  if (cLowHigh == 0) CommandSend(0x04) ;
   \   00003C 65                    MOV       A, D
   \   00003D D1                    CMP0      A
   \   00003E 75                    MOV       D, A
   \   00003F DF05                  BNZ       ??LCDEraseBlock_3
   \   000041 5104                  MOV       A, #0x4
   \   000043 FD....                CALL      CommandSend
    167                  if (cLowHigh == 1) CommandSend(0x05) ;
   \                     ??LCDEraseBlock_3:
   \   000046 65                    MOV       A, D
   \   000047 4C01                  CMP       A, #0x1
   \   000049 75                    MOV       D, A
   \   00004A DF05                  BNZ       ??LCDEraseBlock_4
   \   00004C 5105                  MOV       A, #0x5
   \   00004E FD....                CALL      CommandSend
    168              
    169                  /* Use Function Set 1 H[1:0]=(0,1) */
    170                  /* Original Development hardcoded this as CommandSend(0x021) */
    171                  CommandSend(LCD_FUNCTION_ONE);
   \                     ??LCDEraseBlock_4:
   \   000051 5129                  MOV       A, #0x29
   \   000053 FD....                CALL      CommandSend
    172                  //p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ONE) ;
    173                  /* Set PRS=0 to 2.94 V or PRS=1 2.95V to 6.75V */
    174                  /* the value here can be 0 to 127 or 0x00 to 0x7F */
    175                  CommandSend(cByteToSend) ;
   \   000056 64                    MOV       A, E
   \   000057 FD....                CALL      CommandSend
    176              }
    177          }
   \                     ??LCDEraseBlock_0:
   \   00005A 1004                  ADDW      SP, #0x4
   \   00005C C4                    POP       DE
   \   00005D D7                    RET       
   \   00005E                       REQUIRE ?CLRL78_V1_0_L00
    178          //************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    179          void ST7579_SetSystemBiasBooster( int8_t cValue0To17)
   \                     ST7579_SetSystemBiasBooster:
    180          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001                       ; Auto size: 0
   \   000001 70                    MOV       X, A
    181             
    182          
    183              if (cValue0To17 <= 17) {
   \   000002 60                    MOV       A, X
   \   000003 7C80                  XOR       A, #0x80
   \   000005 2C92                  SUB       A, #0x92
   \   000007 61C8                  SKC
   \   000009 ED....                BR        N:??LCDEraseBlock_5
    184                  /* Select bias and boost settings from value */
    185                  char cBias = 0 ;
   \   00000C F2                    CLRB      C
    186                  char cBoost = 0 ;
   \   00000D F3                    CLRB      B
    187                  switch (cValue0To17) {
   \   00000E 60                    MOV       A, X
   \   00000F 36....                MOVW      HL, #LWRD(??ST7579_SetSystemBiasBooster_0)
   \   000012 41..                  MOV       ES, #BYTE3(??ST7579_SetSystemBiasBooster_0)
   \   000014 CEFC..                MOV       CS, #BYTE3(ST7579_SetSystemBiasBooster)
   \   000017 ED....                BR        N:?C_SSWITCH_L10
    188                      case 0:
    189                          /* Bias level 1/4 Boost Times 3. */
    190                          cBias = 0x17 ;
   \                     ??ST7579_SetSystemBiasBooster_1:
   \   00001A 5217                  MOV       C, #0x17
    191                          cBoost = 0x99 ;
   \   00001C 5399                  MOV       B, #0x99
    192                          break ;
   \   00001E EF6A                  BR        S:??LCDEraseBlock_6
    193                      case 3:
    194                          /* Bias level 1/5 Boost Times 3. */
    195                          cBias = 0x16 ;
   \                     ??ST7579_SetSystemBiasBooster_2:
   \   000020 5216                  MOV       C, #0x16
    196                          cBoost = 0x99 ;
   \   000022 5399                  MOV       B, #0x99
    197                          break ;
   \   000024 EF64                  BR        S:??LCDEraseBlock_6
    198                      case 6:
    199                          /* Bias level 1/6 Boost Times 3. */
    200                          cBias = 0x15 ;
   \                     ??ST7579_SetSystemBiasBooster_3:
   \   000026 5215                  MOV       C, #0x15
    201                          cBoost = 0x99 ;
   \   000028 5399                  MOV       B, #0x99
    202                          break ;
   \   00002A EF5E                  BR        S:??LCDEraseBlock_6
    203                      case 9:
    204                          /* Bias level 1/7 Boost Times 3. */
    205                          cBias = 0x14 ;
   \                     ??ST7579_SetSystemBiasBooster_4:
   \   00002C 5214                  MOV       C, #0x14
    206                          cBoost = 0x99 ;
   \   00002E 5399                  MOV       B, #0x99
    207                          break ;
   \   000030 EF58                  BR        S:??LCDEraseBlock_6
    208                      case 1:
    209                          /* Bias level 1/4 Boost Times 4. */
    210                          cBias = 0x17 ;
   \                     ??ST7579_SetSystemBiasBooster_5:
   \   000032 5217                  MOV       C, #0x17
    211                          cBoost = 0x9A ;
   \   000034 539A                  MOV       B, #0x9A
    212                          break ;
   \   000036 EF52                  BR        S:??LCDEraseBlock_6
    213                      case 4:
    214                          /* Bias level 1/5 Boost Times 4. */
    215                          cBias = 0x16 ;
   \                     ??ST7579_SetSystemBiasBooster_6:
   \   000038 5216                  MOV       C, #0x16
    216                          cBoost = 0x9A ;
   \   00003A 539A                  MOV       B, #0x9A
    217                          break ;
   \   00003C EF4C                  BR        S:??LCDEraseBlock_6
    218                      case 7:
    219                          /* Bias level 1/6 Boost Times 4. */
    220                          cBias = 0x15 ;
   \                     ??ST7579_SetSystemBiasBooster_7:
   \   00003E 5215                  MOV       C, #0x15
    221                          cBoost = 0x9A ;
   \   000040 539A                  MOV       B, #0x9A
    222                          break ;
   \   000042 EF46                  BR        S:??LCDEraseBlock_6
    223                      case 10:
    224                          /* Bias level 1/7 Boost Times 4. */
    225                          cBias = 0x14 ;
   \                     ??ST7579_SetSystemBiasBooster_8:
   \   000044 5214                  MOV       C, #0x14
    226                          cBoost = 0x9A ;
   \   000046 539A                  MOV       B, #0x9A
    227                          break ;
   \   000048 EF40                  BR        S:??LCDEraseBlock_6
    228                      case 12:
    229                          /* Bias level 1/8 Boost Times 4. */
    230                          cBias = 0x13 ;
   \                     ??ST7579_SetSystemBiasBooster_9:
   \   00004A 5213                  MOV       C, #0x13
    231                          cBoost = 0x9A ;
   \   00004C 539A                  MOV       B, #0x9A
    232                          break ;
   \   00004E EF3A                  BR        S:??LCDEraseBlock_6
    233                      case 14:
    234                          /* Bias level 1/9 Boost Times 4. */
    235                          cBias = 0x12 ;
   \                     ??ST7579_SetSystemBiasBooster_10:
   \   000050 5212                  MOV       C, #0x12
    236                          cBoost = 0x9A ;
   \   000052 539A                  MOV       B, #0x9A
    237                          break ;
   \   000054 EF34                  BR        S:??LCDEraseBlock_6
    238                      case 2:
    239                          /* Bias level 1/4 Boost Times 5. */
    240                          cBias = 0x17 ;
   \                     ??ST7579_SetSystemBiasBooster_11:
   \   000056 5217                  MOV       C, #0x17
    241                          cBoost = 0x9B ;
   \   000058 539B                  MOV       B, #0x9B
    242                          break ;
   \   00005A EF2E                  BR        S:??LCDEraseBlock_6
    243                      case 5:
    244                          /* Bias level 1/5 Boost Times 5. */
    245                          cBias = 0x16 ;
   \                     ??ST7579_SetSystemBiasBooster_12:
   \   00005C 5216                  MOV       C, #0x16
    246                          cBoost = 0x9B ;
   \   00005E 539B                  MOV       B, #0x9B
    247                          break ;
   \   000060 EF28                  BR        S:??LCDEraseBlock_6
    248                      case 8:
    249                          /* Bias level 1/6 Boost Times 5. */
    250                          cBias = 0x15 ;
   \                     ??ST7579_SetSystemBiasBooster_13:
   \   000062 5215                  MOV       C, #0x15
    251                          cBoost = 0x9B ;
   \   000064 539B                  MOV       B, #0x9B
    252                          break ;
   \   000066 EF22                  BR        S:??LCDEraseBlock_6
    253                      case 11:
    254                          /* Bias level 1/7 Boost Times 5. */
    255                          cBias = 0x14 ;
   \                     ??ST7579_SetSystemBiasBooster_14:
   \   000068 5214                  MOV       C, #0x14
    256                          cBoost = 0x9B ;
   \   00006A 539B                  MOV       B, #0x9B
    257                          break ;
   \   00006C EF1C                  BR        S:??LCDEraseBlock_6
    258                      case 13:
    259                          /* Bias level 1/8 Boost Times 5. */
    260                          cBias = 0x13 ;
   \                     ??ST7579_SetSystemBiasBooster_15:
   \   00006E 5213                  MOV       C, #0x13
    261                          cBoost = 0x9B ;
   \   000070 539B                  MOV       B, #0x9B
    262                          break ;
   \   000072 EF16                  BR        S:??LCDEraseBlock_6
    263                      case 15:
    264                          /* Bias level 1/9 Boost Times 5. */
    265                          cBias = 0x12 ;
   \                     ??ST7579_SetSystemBiasBooster_16:
   \   000074 5212                  MOV       C, #0x12
    266                          cBoost = 0x9B ;
   \   000076 539B                  MOV       B, #0x9B
    267                          break ;
   \   000078 EF10                  BR        S:??LCDEraseBlock_6
    268                      case 16:
    269                          /* Bias level 1/10 Boost Times 5. */
    270                          cBias = 0x11 ;
   \                     ??ST7579_SetSystemBiasBooster_17:
   \   00007A 5211                  MOV       C, #0x11
    271                          cBoost = 0x9B ;
   \   00007C 539B                  MOV       B, #0x9B
    272                          break ;
   \   00007E EF0A                  BR        S:??LCDEraseBlock_6
    273                      case 17:
    274                          /* Bias level 1/11 Boost Times 5. */
    275                          cBias = 0x10 ;
   \                     ??ST7579_SetSystemBiasBooster_18:
   \   000080 5210                  MOV       C, #0x10
    276                          cBoost = 0x9B ;
   \   000082 539B                  MOV       B, #0x9B
    277                          break ;
   \   000084 EF04                  BR        S:??LCDEraseBlock_6
    278                      default:
    279                          /* Bias level 7 Boost Times 3. */
    280                          cBias = 0x14 ;
   \                     ??ST7579_SetSystemBiasBooster_19:
   \   000086 5214                  MOV       C, #0x14
    281                          cBoost = 0x99 ;
   \   000088 5399                  MOV       B, #0x99
    282                          break ;
    283                  }
    284          
    285                  /* Set Bias */
    286                  /* Use Function Set 1 H[1:0]=(0,1) */
    287                  /* Original Development hardcoded this as CommandSend(0x021) */
    288                  
    289                  
    290                  CommandSend(LCD_FUNCTION_ONE);
   \                     ??LCDEraseBlock_6:
   \   00008A 5129                  MOV       A, #0x29
   \   00008C FD....                CALL      CommandSend
    291                  CommandSend(cBias) ;
   \   00008F 62                    MOV       A, C
   \   000090 FD....                CALL      CommandSend
    292                  /* Set Booster */
    293                  /* Use Function Set 3 H[1:0]=(1,1) */
    294                  /* Original Development hardcoded this as CommandSend(0x023) */
    295                  CommandSend(LCD_FUNCTION_THREE) ;
   \   000093 512B                  MOV       A, #0x2B
   \   000095 FD....                CALL      CommandSend
    296                  /* Set default efficiency and multiplyer on voltage */
    297                  CommandSend(cBoost) ;
   \   000098 63                    MOV       A, B
   \   000099 FD....                CALL      CommandSend
    298              }
    299          }
   \                     ??LCDEraseBlock_5:
   \   00009C C2                    POP       BC
   \   00009D D7                    RET       
   \   00009E                       REQUIRE ?CLRL78_V1_0_L00
    300          //************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    301          void ST7579_SetFrameRate( int32_t nRate55To137)
   \                     ST7579_SetFrameRate:
    302          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001 C1                    PUSH      AX
   \   000002                       ; Auto size: 4
    303            
    304              /* Use Function Set 3 H[1:0]=(1,1) */
    305              /* Original Development hardcoded this as CommandSend(0x023) */
    306              CommandSend(LCD_FUNCTION_THREE) ;
   \   000002 512B                  MOV       A, #0x2B
   \   000004 FD....                CALL      CommandSend
    307          
    308              switch(nRate55To137) {
   \   000007 A802                  MOVW      AX, [SP+0x02]
   \   000009 12                    MOVW      BC, AX
   \   00000A A800                  MOVW      AX, [SP]
   \   00000C 33                    XCHW      AX, BC
   \   00000D 440000                CMPW      AX, #0x0
   \   000010 13                    MOVW      AX, BC
   \   000011 DF62                  BNZ       ??LCDEraseBlock_7
   \   000013 443700                CMPW      AX, #0x37
   \   000016 DD25                  BZ        ??LCDEraseBlock_8
   \   000018 444100                CMPW      AX, #0x41
   \   00001B DD27                  BZ        ??LCDEraseBlock_9
   \   00001D 444400                CMPW      AX, #0x44
   \   000020 DD29                  BZ        ??LCDEraseBlock_10
   \   000022 444600                CMPW      AX, #0x46
   \   000025 DD2B                  BZ        ??LCDEraseBlock_11
   \   000027 444900                CMPW      AX, #0x49
   \   00002A DD2D                  BZ        ??LCDEraseBlock_12
   \   00002C 444C00                CMPW      AX, #0x4C
   \   00002F DD2F                  BZ        ??LCDEraseBlock_13
   \   000031 445000                CMPW      AX, #0x50
   \   000034 DD31                  BZ        ??LCDEraseBlock_14
   \   000036 448900                CMPW      AX, #0x89
   \   000039 DD33                  BZ        ??LCDEraseBlock_15
   \   00003B EF38                  BR        S:??LCDEraseBlock_7
    309                  case 55:
    310                      /* Set frame rate of 55 */
    311                      CommandSend(0x08) ;
   \                     ??LCDEraseBlock_8:
   \   00003D 5108                  MOV       A, #0x8
   \   00003F FD....                CALL      CommandSend
    312                      break ;
   \   000042 EF36                  BR        S:??LCDEraseBlock_16
    313                  case 65:
    314                      /* Set frame rate of 65 */
    315                      CommandSend(0x09) ;
   \                     ??LCDEraseBlock_9:
   \   000044 5109                  MOV       A, #0x9
   \   000046 FD....                CALL      CommandSend
    316                      break ;
   \   000049 EF2F                  BR        S:??LCDEraseBlock_16
    317                  case 68:
    318                      /* Set frame rate of 68 */
    319                      CommandSend(0x0A) ;
   \                     ??LCDEraseBlock_10:
   \   00004B 510A                  MOV       A, #0xA
   \   00004D FD....                CALL      CommandSend
    320                      break ;
   \   000050 EF28                  BR        S:??LCDEraseBlock_16
    321                  case 70:
    322                      /* Set frame rate of 70 */
    323                      CommandSend(0x0B) ;
   \                     ??LCDEraseBlock_11:
   \   000052 510B                  MOV       A, #0xB
   \   000054 FD....                CALL      CommandSend
    324                      break ;
   \   000057 EF21                  BR        S:??LCDEraseBlock_16
    325                  case 73:
    326                      /* Set frame rate of 73(Default) */
    327                      CommandSend(0x0C) ;
   \                     ??LCDEraseBlock_12:
   \   000059 510C                  MOV       A, #0xC
   \   00005B FD....                CALL      CommandSend
    328                      break ;
   \   00005E EF1A                  BR        S:??LCDEraseBlock_16
    329                  case 76:
    330                      /* Set frame rate of 76 */
    331                      CommandSend(0x0D) ;
   \                     ??LCDEraseBlock_13:
   \   000060 510D                  MOV       A, #0xD
   \   000062 FD....                CALL      CommandSend
    332                      break ;
   \   000065 EF13                  BR        S:??LCDEraseBlock_16
    333                  case 80:
    334                      /* Set frame rate of 80 */
    335                      CommandSend(0x0E) ;
   \                     ??LCDEraseBlock_14:
   \   000067 510E                  MOV       A, #0xE
   \   000069 FD....                CALL      CommandSend
    336                      break ;
   \   00006C EF0C                  BR        S:??LCDEraseBlock_16
    337                  case 137:
    338                      /* Set frame rate of 137 */
    339                      CommandSend(0x0F) ;
   \                     ??LCDEraseBlock_15:
   \   00006E 510F                  MOV       A, #0xF
   \   000070 FD....                CALL      CommandSend
    340                      break ;
   \   000073 EF05                  BR        S:??LCDEraseBlock_16
    341                  default:
    342                      /* Set frame rate of 73(Default) */
    343                        CommandSend(0x0C) ;
   \                     ??LCDEraseBlock_7:
   \   000075 510C                  MOV       A, #0xC
   \   000077 FD....                CALL      CommandSend
    344              }
    345          }
   \                     ??LCDEraseBlock_16:
   \   00007A 1004                  ADDW      SP, #0x4
   \   00007C D7                    RET       
   \   00007D                       REQUIRE ?CLRL78_V1_0_L00
    346          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    347          void ST7579_SetPage( uint8_t cValue0To9)
   \                     ST7579_SetPage:
    348          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001                       ; Auto size: 0
   \   000001 70                    MOV       X, A
    349              
    350             char cValueToSend = cValue0To9 | 0x40 ;
   \   000002 60                    MOV       A, X
   \   000003 6C40                  OR        A, #0x40
   \   000005 73                    MOV       B, A
    351          
    352              if (cValue0To9 <= 9) {
   \   000006 60                    MOV       A, X
   \   000007 4C0A                  CMP       A, #0xA
   \   000009 DE0D                  BNC       ??LCDEraseBlock_17
    353                  cValueToSend &= 0x4F ;
   \   00000B 63                    MOV       A, B
   \   00000C 5C4F                  AND       A, #0x4F
   \   00000E 73                    MOV       B, A
    354              
    355                  // Use Function Set 0 H[1:0]=(0,0) 
    356                 // Original Development hardcoded this as CommandSend(0x020) 
    357                  CommandSend(LCD_FUNCTION_ZERO) ;
   \   00000F 5128                  MOV       A, #0x28
   \   000011 FD....                CALL      CommandSend
    358                 // Set Ram Page of 0 to 9 where 0x40 is 0 and 0x49 is nine 
    359                  CommandSend(cValueToSend) ;
   \   000014 63                    MOV       A, B
   \   000015 FD....                CALL      CommandSend
    360             }
    361             
    362             
    363            
    364            //  CommandSend(LCD_FUNCTION_ZERO);
    365             // CommandSend(0x40 |  cValue0To9) ;  
    366                
    367            
    368          }
   \                     ??LCDEraseBlock_17:
   \   000018 C2                    POP       BC
   \   000019 D7                    RET       
   \   00001A                       REQUIRE ?CLRL78_V1_0_L00
    369          //******************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    370          void ST7579_SetChar(  int8_t cValue0To101)
   \                     ST7579_SetChar:
    371          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001                       ; Auto size: 0
   \   000001 70                    MOV       X, A
    372            
    373              char cValueToSend = cValue0To101 | 0x80 ;
   \   000002 60                    MOV       A, X
   \   000003 6C80                  OR        A, #0x80
   \   000005 73                    MOV       B, A
    374              
    375              if (cValue0To101 <= 101) {
   \   000006 60                    MOV       A, X
   \   000007 7C80                  XOR       A, #0x80
   \   000009 2CE6                  SUB       A, #0xE6
   \   00000B DE09                  BNC       ??LCDEraseBlock_18
    376                  cValueToSend &= 0xFF ;
    377              
    378                  // Use Function Set 0 H[1:0]=(0,0) 
    379                 // Original Development hardcoded this as CommandSend(0x020)
    380                 // p_gw->iCommAPI->iCommandSend(LCD_FUNCTION_ZERO) ;
    381                  CommandSend(LCD_FUNCTION_ZERO);
   \   00000D 5128                  MOV       A, #0x28
   \   00000F FD....                CALL      CommandSend
    382                  // Set Ram Page of 0 to 9 where 0x40 is 0 and 0x49 is nine 
    383                  CommandSend(cValueToSend) ;
   \   000012 63                    MOV       A, B
   \   000013 FD....                CALL      CommandSend
    384              }
    385                     
    386            
    387             // CommandSend(LCD_FUNCTION_ZERO);
    388             // CommandSend(0x80 | cValue0To101) ;  
    389                
    390          }
   \                     ??LCDEraseBlock_18:
   \   000016 C2                    POP       BC
   \   000017 D7                    RET       
   \   000018                       REQUIRE ?CLRL78_V1_0_L00
    391          //***********************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    392          void ST7579_SetLine(  int8_t cValue0To66)
   \                     ST7579_SetLine:
    393          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001 C5                    PUSH      DE
   \   000002                       ; Auto size: 10
   \   000002 200A                  SUBW      SP, #0xA
   \   000004 73                    MOV       B, A
    394             
    395          
    396              if (cValue0To66 <= 66) {
   \   000005 63                    MOV       A, B
   \   000006 7C80                  XOR       A, #0x80
   \   000008 2CC3                  SUB       A, #0xC3
   \   00000A 61C8                  SKC
   \   00000C ED....                BR        N:??LCDEraseBlock_19
    397                  int8_t cData[10] = "" ;
   \   00000F AEF8                  MOVW      AX, SP
   \   000011 14                    MOVW      DE, AX
   \   000012 36....                MOVW      HL, #`?<Constant "">`
   \   000015 AB                    MOVW      AX, [HL]
   \   000016 B9                    MOVW      [DE], AX
   \   000017 AC02                  MOVW      AX, [HL+0x02]
   \   000019 BA02                  MOVW      [DE+0x02], AX
   \   00001B AC04                  MOVW      AX, [HL+0x04]
   \   00001D BA04                  MOVW      [DE+0x04], AX
   \   00001F AC06                  MOVW      AX, [HL+0x06]
   \   000021 BA06                  MOVW      [DE+0x06], AX
   \   000023 AC08                  MOVW      AX, [HL+0x08]
   \   000025 BA08                  MOVW      [DE+0x08], AX
    398                  int8_t cValueToSendLow = 0 ;
   \   000027 F2                    CLRB      C
    399                  int8_t cValueToSendHigh = 0 ;
   \   000028 5500                  MOV       D, #0x0
    400              
    401                  cData[0] = 0 ;
   \   00002A F1                    CLRB      A
   \   00002B 9800                  MOV       [SP], A
    402                  cData[1] = 0 ;
   \   00002D F1                    CLRB      A
   \   00002E 9801                  MOV       [SP+0x01], A
    403                  cData[2] = 0 ;
   \   000030 F1                    CLRB      A
   \   000031 9802                  MOV       [SP+0x02], A
    404                  cData[3] = 0 ;
   \   000033 F1                    CLRB      A
   \   000034 9803                  MOV       [SP+0x03], A
    405                  cData[4] = 0 ;
   \   000036 F1                    CLRB      A
   \   000037 9804                  MOV       [SP+0x04], A
    406                  cData[5] = 0 ;
   \   000039 F1                    CLRB      A
   \   00003A 9805                  MOV       [SP+0x05], A
    407                  cData[6] = 0 ;
   \   00003C F1                    CLRB      A
   \   00003D 9806                  MOV       [SP+0x06], A
    408              
    409                  /*  binary 1111 1111 becomes 0000 0001 */
    410                  cData[0] = 0x01 & cValue0To66 ;
   \   00003F 63                    MOV       A, B
   \   000040 5C01                  AND       A, #0x1
   \   000042 9800                  MOV       [SP], A
    411                  /*  binary 1111 1111 becomes 0000 0010 */
    412                  cData[1] = 0x02 & cValue0To66 ;
   \   000044 63                    MOV       A, B
   \   000045 5C02                  AND       A, #0x2
   \   000047 9801                  MOV       [SP+0x01], A
    413                  /*  binary 1111 1111 becomes 0000 0100 */
    414                  cData[2] = 0x04 & cValue0To66 ;
   \   000049 63                    MOV       A, B
   \   00004A 5C04                  AND       A, #0x4
   \   00004C 9802                  MOV       [SP+0x02], A
    415                  /*  binary 1111 1111 becomes 0000 1000 */
    416                  cData[3] = 0x08 & cValue0To66 ;
   \   00004E 63                    MOV       A, B
   \   00004F 5C08                  AND       A, #0x8
   \   000051 9803                  MOV       [SP+0x03], A
    417                  /* binary 1111 1111 becomes 0001 0000 */
    418                  cData[4] = 0x010 & cValue0To66 ;
   \   000053 63                    MOV       A, B
   \   000054 5C10                  AND       A, #0x10
   \   000056 9804                  MOV       [SP+0x04], A
    419                  /* binary 1111 1111 becomes 0010 0000 */
    420                  cData[5] = 0x020 & cValue0To66 ;
   \   000058 63                    MOV       A, B
   \   000059 5C20                  AND       A, #0x20
   \   00005B 9805                  MOV       [SP+0x05], A
    421                  /* binary 1111 1111 becomes 0100 0000 */
    422                  cData[6] = 0x040 & cValue0To66 ;
   \   00005D 63                    MOV       A, B
   \   00005E 5C40                  AND       A, #0x40
   \   000060 9806                  MOV       [SP+0x06], A
    423              
    424                  /* binary 10 becomes binary 1 */
    425                  cData[1] = cData[1] >> 1 ;
   \   000062 8801                  MOV       A, [SP+0x01]
   \   000064 311B                  SAR       A, 0x1
   \   000066 9801                  MOV       [SP+0x01], A
    426                  /* binary 100 becomes binary 1 */
    427                  cData[2] = cData[2] >> 2 ;
   \   000068 8802                  MOV       A, [SP+0x02]
   \   00006A 312B                  SAR       A, 0x2
   \   00006C 9802                  MOV       [SP+0x02], A
    428                  /* binary 1000 becomes binary 1 */
    429                  cData[3] = cData[3] >> 3 ;
   \   00006E 8803                  MOV       A, [SP+0x03]
   \   000070 313B                  SAR       A, 0x3
   \   000072 9803                  MOV       [SP+0x03], A
    430                  /* binary 1 0000 becomes binary 1 */
    431                  cData[4] = cData[4] >> 4 ;
   \   000074 8804                  MOV       A, [SP+0x04]
   \   000076 314B                  SAR       A, 0x4
   \   000078 9804                  MOV       [SP+0x04], A
    432                  /* binary 10 0000 becomes binary 1 */
    433                  cData[5] = cData[5] >> 5 ;
   \   00007A 8805                  MOV       A, [SP+0x05]
   \   00007C 315B                  SAR       A, 0x5
   \   00007E 9805                  MOV       [SP+0x05], A
    434                  /* binary 100 0000 becomes binary 1 */
    435                  cData[6] = cData[6] >> 6 ;
   \   000080 8806                  MOV       A, [SP+0x06]
   \   000082 316B                  SAR       A, 0x6
   \   000084 9806                  MOV       [SP+0x06], A
    436              
    437                  cValueToSendLow = cData[6] | 0x04 ;
   \   000086 8806                  MOV       A, [SP+0x06]
   \   000088 6C04                  OR        A, #0x4
   \   00008A 72                    MOV       C, A
    438                  cValueToSendHigh = cData[0] | cData[1] | cData[2] | cData[3] | cData[4] | cData[5] | 0x40 ;
   \   00008B 8805                  MOV       A, [SP+0x05]
   \   00008D 70                    MOV       X, A
   \   00008E 8804                  MOV       A, [SP+0x04]
   \   000090 73                    MOV       B, A
   \   000091 8803                  MOV       A, [SP+0x03]
   \   000093 74                    MOV       E, A
   \   000094 8802                  MOV       A, [SP+0x02]
   \   000096 77                    MOV       H, A
   \   000097 8801                  MOV       A, [SP+0x01]
   \   000099 76                    MOV       L, A
   \   00009A 8800                  MOV       A, [SP]
   \   00009C 616E                  OR        A, L
   \   00009E 616F                  OR        A, H
   \   0000A0 616C                  OR        A, E
   \   0000A2 616B                  OR        A, B
   \   0000A4 6168                  OR        A, X
   \   0000A6 6C40                  OR        A, #0x40
   \   0000A8 75                    MOV       D, A
    439          
    440                  /* Use Function Set 1 H[1:0]=(0,1) */
    441                  /* Original Development hardcoded this as CommandSend(0x021) */
    442                  CommandSend(LCD_FUNCTION_ONE) ;
   \   0000A9 5129                  MOV       A, #0x29
   \   0000AB FD....                CALL      CommandSend
    443          
    444                  /* Set Ram Start Line of 0 to 66 using a high and low value and two command sends */
    445                 CommandSend(cValueToSendHigh) ;
   \   0000AE 65                    MOV       A, D
   \   0000AF FD....                CALL      CommandSend
    446                 CommandSend(cValueToSendLow) ;
   \   0000B2 62                    MOV       A, C
   \   0000B3 FD....                CALL      CommandSend
    447              }
    448          }
   \                     ??LCDEraseBlock_19:
   \   0000B6 100A                  ADDW      SP, #0xA
   \   0000B8 C4                    POP       DE
   \   0000B9 C2                    POP       BC
   \   0000BA D7                    RET       
   \   0000BB                       REQUIRE ?CLRL78_V1_0_L00
    449          //********************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    450          void ST7579_Send16bitsCommand(int32_t nCommand)
   \                     ST7579_Send16bitsCommand:
    451          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX
   \   000002 C3                    PUSH      BC
   \   000003 C6                    POP       HL
    452            
    453             int8_t cCommandOne = (int8_t)((nCommand >> 8) & 0x00FF) ;
   \   000004 15                    MOVW      AX, DE
   \   000005 318F                  SARW      AX, 0x8
   \   000007 60                    MOV       A, X
    454             int8_t cCommandTwo = (int8_t)(nCommand & 0x00FF) ;
   \   000008 618C                  XCH       A, E
   \   00000A 73                    MOV       B, A
   \   00000B 64                    MOV       A, E
    455          
    456              CommandSend(cCommandOne) ;
   \   00000C FD....                CALL      CommandSend
    457              CommandSend(cCommandTwo) ;
   \   00000F 63                    MOV       A, B
   \   000010 FD....                CALL      CommandSend
    458          }
   \   000013 C4                    POP       DE
   \   000014 D7                    RET       
   \   000015                       REQUIRE ?CLRL78_V1_0_L00
    459          //****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    460          void ST7579_Config()
   \                     ST7579_Config:
    461          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001 C5                    PUSH      DE
   \   000002                       ; Auto size: 0
    462            
    463             
    464              int i = 0 ;
   \   000002 F6                    CLRW      AX
   \   000003 14                    MOVW      DE, AX
    465              
    466              // Inialize Display 
    467              ST7579_SetSystemBiasBooster(5) ; //5
   \   000004 5105                  MOV       A, #0x5
   \   000006 FD....                CALL      ST7579_SetSystemBiasBooster
    468              ST7579_SetVO_Range(95) ;  //95
   \   000009 305F00                MOVW      AX, #0x5F
   \   00000C F7                    CLRW      BC
   \   00000D FD....                CALL      ST7579_SetVO_Range
    469              for (i=0;i<1000;i++){}
   \   000010 F6                    CLRW      AX
   \   000011 14                    MOVW      DE, AX
   \   000012 EF01                  BR        S:??LCDEraseBlock_20
   \                     ??ST7579_Config_0:
   \   000014 A5                    INCW      DE
   \                     ??LCDEraseBlock_20:
   \   000015 15                    MOVW      AX, DE
   \   000016 7C80                  XOR       A, #0x80
   \   000018 44E883                CMPW      AX, #0x83E8
   \   00001B DCF7                  BC        ??ST7579_Config_0
    470              ST7579_SetFrameRate(137) ; //137
   \   00001D 308900                MOVW      AX, #0x89
   \   000020 F7                    CLRW      BC
   \   000021 FD....                CALL      ST7579_SetFrameRate
    471              
    472              
    473               // set up the bias and boost
    474              /*
    475              CommandSend(LCD_FUNCTION_ONE);
    476              CommandSend(0x16); // bias
    477              CommandSend(LCD_FUNCTION_THREE);
    478              CommandSend(0x9B); // boost
    479          
    480              // set VO range
    481              CommandSend(LCD_FUNCTION_ZERO);
    482              CommandSend(0x4);
    483              CommandSend(LCD_FUNCTION_ONE);
    484              CommandSend(0x80 | 80);
    485          
    486              
    487              
    488              ST7579_SetPage(0) ;
    489              ST7579_SetChar(0) ;
    490              for (i =0 ; i < 808; i++)
    491                 DataSend(0x00);
    492              
    493              CommandSend(LCD_FUNCTION_ZERO);
    494              CommandSend(0x8 | 0x4) ;  
    495              
    496              */
    497            
    498            
    499          
    500          }
   \   000024 C4                    POP       DE
   \   000025 C2                    POP       BC
   \   000026 D7                    RET       
   \   000027                       REQUIRE ?CLRL78_V1_0_L00
    501          
    502          //************************************************************************
    503          

   \                                 In  segment CODE, align 1, keep-with-next
    504          void LCDInit (void)
   \                     LCDInit:
    505          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001                       ; Auto size: 0
    506            
    507               // Setup output pins
    508              P1 = (1<<0) | (1<<5);
   \   000001 CD0121                MOV       S:0xFFF01, #0x21
    509              PM1 &= (unsigned char)~(1<<0);  // Set P10 (LCD CS) to output
   \   000004 710B21                CLR1      0xFFF21.0
    510              PM1 &= (unsigned char)~(1<<5);  // Set P15 (LCD RS) to output
   \   000007 715B21                CLR1      0xFFF21.5
    511            
    512            
    513            
    514              spi10_Init();
   \   00000A FD....                CALL      spi10_Init
    515              ST7579_Config();
   \   00000D FD....                CALL      ST7579_Config
    516              
    517              
    518              
    519              ST7579_Send16bitsCommand(LCD_DISPLAY_NORMAL);
   \   000010 300C28                MOVW      AX, #0x280C
   \   000013 F7                    CLRW      BC
   \   000014 FD....                CALL      ST7579_Send16bitsCommand
    520              LCDPatron();
   \   000017 FD....                CALL      LCDPatron
    521              LCDClear();
   \   00001A FD....                CALL      LCDClear
    522             
    523             
    524            
    525              
    526          }
   \   00001D C2                    POP       BC
   \   00001E D7                    RET       
   \   00001F                       REQUIRE ?CLRL78_V1_0_L00
   \   00001F                       REQUIRE _A_P1
   \   00001F                       REQUIRE _A_PM1
    527          
    528          //****************************************************************************
    529          
    530          

   \                                 In  segment CODE, align 1, keep-with-next
    531          void LCDClear (void)
   \                     LCDClear:
    532          { 
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001                       ; Auto size: 8
   \   000001 2008                  SUBW      SP, #0x8
    533           
    534              uint32_t pCounter;
    535              uint32_t column;
    536          
    537              ST7579_SetLine(0);
   \   000003 F1                    CLRB      A
   \   000004 FD....                CALL      ST7579_SetLine
    538              for (pCounter=0;pCounter<8;pCounter++)
   \   000007 AEF8                  MOVW      AX, SP
   \   000009 16                    MOVW      HL, AX
   \   00000A F6                    CLRW      AX
   \   00000B BB                    MOVW      [HL], AX
   \   00000C F6                    CLRW      AX
   \   00000D BC02                  MOVW      [HL+0x02], AX
   \   00000F EF55                  BR        S:??LCDEraseBlock_21
    539              {
    540                  ST7579_SetPage(pCounter);
    541                  ST7579_SetChar(0);
    542                  
    543                  for (column=0; column<128; column++)   {
    544                            DataSend(0x00);
   \                     ??LCDClear_0:
   \   000011 F1                    CLRB      A
   \   000012 FD....                CALL      DataSend
    545                  }              
   \   000015 AEF8                  MOVW      AX, SP
   \   000017 040400                ADDW      AX, #0x4
   \   00001A 16                    MOVW      HL, AX
   \   00001B AC02                  MOVW      AX, [HL+0x02]
   \   00001D 12                    MOVW      BC, AX
   \   00001E AB                    MOVW      AX, [HL]
   \   00001F 040100                ADDW      AX, #0x1
   \   000022 61D8                  SKNC
   \   000024 A3                    INCW      BC
   \                     ??LCDClear_1:
   \   000025 33                    XCHW      AX, BC
   \   000026 040000                ADDW      AX, #0x0
   \   000029 33                    XCHW      AX, BC
   \   00002A 16                    MOVW      HL, AX
   \   00002B AEF8                  MOVW      AX, SP
   \   00002D 040400                ADDW      AX, #0x4
   \   000030 37                    XCHW      AX, HL
   \   000031 BB                    MOVW      [HL], AX
   \   000032 13                    MOVW      AX, BC
   \   000033 BC02                  MOVW      [HL+0x02], AX
   \   000035 12                    MOVW      BC, AX
   \                     ??LCDClear_2:
   \   000036 AEF8                  MOVW      AX, SP
   \   000038 040400                ADDW      AX, #0x4
   \   00003B 16                    MOVW      HL, AX
   \   00003C AC02                  MOVW      AX, [HL+0x02]
   \   00003E 12                    MOVW      BC, AX
   \   00003F AB                    MOVW      AX, [HL]
   \   000040 33                    XCHW      AX, BC
   \   000041 440000                CMPW      AX, #0x0
   \   000044 13                    MOVW      AX, BC
   \   000045 61F8                  SKNZ
   \   000047 448000                CMPW      AX, #0x80
   \                     ??LCDClear_3:
   \   00004A DCC5                  BC        ??LCDClear_0
   \   00004C AEF8                  MOVW      AX, SP
   \   00004E 16                    MOVW      HL, AX
   \   00004F AC02                  MOVW      AX, [HL+0x02]
   \   000051 12                    MOVW      BC, AX
   \   000052 AB                    MOVW      AX, [HL]
   \   000053 040100                ADDW      AX, #0x1
   \   000056 61D8                  SKNC
   \   000058 A3                    INCW      BC
   \                     ??LCDClear_4:
   \   000059 33                    XCHW      AX, BC
   \   00005A 040000                ADDW      AX, #0x0
   \   00005D 33                    XCHW      AX, BC
   \   00005E FBF8FF                MOVW      HL, SP
   \   000061 BB                    MOVW      [HL], AX
   \   000062 13                    MOVW      AX, BC
   \   000063 BC02                  MOVW      [HL+0x02], AX
   \   000065 12                    MOVW      BC, AX
   \                     ??LCDEraseBlock_21:
   \   000066 AEF8                  MOVW      AX, SP
   \   000068 16                    MOVW      HL, AX
   \   000069 AC02                  MOVW      AX, [HL+0x02]
   \   00006B 12                    MOVW      BC, AX
   \   00006C AB                    MOVW      AX, [HL]
   \   00006D 33                    XCHW      AX, BC
   \   00006E 440000                CMPW      AX, #0x0
   \   000071 13                    MOVW      AX, BC
   \   000072 61F8                  SKNZ
   \   000074 440800                CMPW      AX, #0x8
   \                     ??LCDClear_5:
   \   000077 DE16                  BNC       ??LCDEraseBlock_22
   \   000079 8800                  MOV       A, [SP]
   \   00007B FD....                CALL      ST7579_SetPage
   \   00007E F1                    CLRB      A
   \   00007F FD....                CALL      ST7579_SetChar
   \   000082 AEF8                  MOVW      AX, SP
   \   000084 040400                ADDW      AX, #0x4
   \   000087 16                    MOVW      HL, AX
   \   000088 F6                    CLRW      AX
   \   000089 BB                    MOVW      [HL], AX
   \   00008A F6                    CLRW      AX
   \   00008B BC02                  MOVW      [HL+0x02], AX
   \   00008D EFA7                  BR        S:??LCDClear_2
    546              }
    547              
    548               ST7579_SetPage( 0);
   \                     ??LCDEraseBlock_22:
   \   00008F F1                    CLRB      A
   \   000090 FD....                CALL      ST7579_SetPage
    549               ST7579_SetChar( 0);  
   \   000093 F1                    CLRB      A
   \   000094 FD....                CALL      ST7579_SetChar
    550          }
   \   000097 1008                  ADDW      SP, #0x8
   \   000099 C2                    POP       BC
   \   00009A D7                    RET       
   \   00009B                       REQUIRE ?CLRL78_V1_0_L00
    551          //*************************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    552          void LCDPatron()
   \                     LCDPatron:
    553          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001                       ; Auto size: 8
   \   000001 2008                  SUBW      SP, #0x8
    554            uint32_t pCounter;
    555             uint32_t column;
    556            
    557             for (pCounter=0;pCounter<8;pCounter++)  {
   \   000003 AEF8                  MOVW      AX, SP
   \   000005 16                    MOVW      HL, AX
   \   000006 F6                    CLRW      AX
   \   000007 BB                    MOVW      [HL], AX
   \   000008 F6                    CLRW      AX
   \   000009 BC02                  MOVW      [HL+0x02], AX
   \   00000B EF72                  BR        S:??LCDEraseBlock_23
    558                                  ST7579_SetLine( 0);
    559                                  ST7579_SetChar( 0);              
    560                                  ST7579_SetPage( pCounter);
    561                                  for (column=0;column<16;column++)   {
    562                                     DataSend(0xFF);
   \                     ??LCDPatron_0:
   \   00000D 51FF                  MOV       A, #0xFF
   \   00000F FD....                CALL      DataSend
    563                                     DataSend(0x01);
   \   000012 E1                    ONEB      A
   \   000013 FD....                CALL      DataSend
    564                                     DataSend(0x01);
   \   000016 E1                    ONEB      A
   \   000017 FD....                CALL      DataSend
    565                                     DataSend(0x01);
   \   00001A E1                    ONEB      A
   \   00001B FD....                CALL      DataSend
    566                                     DataSend(0x01);
   \   00001E E1                    ONEB      A
   \   00001F FD....                CALL      DataSend
    567                                     DataSend(0x01);
   \   000022 E1                    ONEB      A
   \   000023 FD....                CALL      DataSend
    568                                     DataSend(0x01);
   \   000026 E1                    ONEB      A
   \   000027 FD....                CALL      DataSend
    569                                     DataSend(0x01);
   \   00002A E1                    ONEB      A
   \   00002B FD....                CALL      DataSend
    570                                  }
   \   00002E AEF8                  MOVW      AX, SP
   \   000030 040400                ADDW      AX, #0x4
   \   000033 16                    MOVW      HL, AX
   \   000034 AC02                  MOVW      AX, [HL+0x02]
   \   000036 12                    MOVW      BC, AX
   \   000037 AB                    MOVW      AX, [HL]
   \   000038 040100                ADDW      AX, #0x1
   \   00003B 61D8                  SKNC
   \   00003D A3                    INCW      BC
   \                     ??LCDPatron_1:
   \   00003E 33                    XCHW      AX, BC
   \   00003F 040000                ADDW      AX, #0x0
   \   000042 33                    XCHW      AX, BC
   \   000043 16                    MOVW      HL, AX
   \   000044 AEF8                  MOVW      AX, SP
   \   000046 040400                ADDW      AX, #0x4
   \   000049 37                    XCHW      AX, HL
   \   00004A BB                    MOVW      [HL], AX
   \   00004B 13                    MOVW      AX, BC
   \   00004C BC02                  MOVW      [HL+0x02], AX
   \   00004E 12                    MOVW      BC, AX
   \                     ??LCDPatron_2:
   \   00004F AEF8                  MOVW      AX, SP
   \   000051 040400                ADDW      AX, #0x4
   \   000054 16                    MOVW      HL, AX
   \   000055 AC02                  MOVW      AX, [HL+0x02]
   \   000057 12                    MOVW      BC, AX
   \   000058 AB                    MOVW      AX, [HL]
   \   000059 33                    XCHW      AX, BC
   \   00005A 440000                CMPW      AX, #0x0
   \   00005D 13                    MOVW      AX, BC
   \   00005E 61F8                  SKNZ
   \   000060 441000                CMPW      AX, #0x10
   \                     ??LCDPatron_3:
   \   000063 DCA8                  BC        ??LCDPatron_0
   \   000065 AEF8                  MOVW      AX, SP
   \   000067 16                    MOVW      HL, AX
   \   000068 AC02                  MOVW      AX, [HL+0x02]
   \   00006A 12                    MOVW      BC, AX
   \   00006B AB                    MOVW      AX, [HL]
   \   00006C 040100                ADDW      AX, #0x1
   \   00006F 61D8                  SKNC
   \   000071 A3                    INCW      BC
   \                     ??LCDPatron_4:
   \   000072 33                    XCHW      AX, BC
   \   000073 040000                ADDW      AX, #0x0
   \   000076 33                    XCHW      AX, BC
   \   000077 FBF8FF                MOVW      HL, SP
   \   00007A BB                    MOVW      [HL], AX
   \   00007B 13                    MOVW      AX, BC
   \   00007C BC02                  MOVW      [HL+0x02], AX
   \   00007E 12                    MOVW      BC, AX
   \                     ??LCDEraseBlock_23:
   \   00007F AEF8                  MOVW      AX, SP
   \   000081 16                    MOVW      HL, AX
   \   000082 AC02                  MOVW      AX, [HL+0x02]
   \   000084 12                    MOVW      BC, AX
   \   000085 AB                    MOVW      AX, [HL]
   \   000086 33                    XCHW      AX, BC
   \   000087 440000                CMPW      AX, #0x0
   \   00008A 13                    MOVW      AX, BC
   \   00008B 61F8                  SKNZ
   \   00008D 440800                CMPW      AX, #0x8
   \                     ??LCDPatron_5:
   \   000090 DE1A                  BNC       ??LCDEraseBlock_24
   \   000092 F1                    CLRB      A
   \   000093 FD....                CALL      ST7579_SetLine
   \   000096 F1                    CLRB      A
   \   000097 FD....                CALL      ST7579_SetChar
   \   00009A 8800                  MOV       A, [SP]
   \   00009C FD....                CALL      ST7579_SetPage
   \   00009F AEF8                  MOVW      AX, SP
   \   0000A1 040400                ADDW      AX, #0x4
   \   0000A4 16                    MOVW      HL, AX
   \   0000A5 F6                    CLRW      AX
   \   0000A6 BB                    MOVW      [HL], AX
   \   0000A7 F6                    CLRW      AX
   \   0000A8 BC02                  MOVW      [HL+0x02], AX
   \   0000AA EFA3                  BR        S:??LCDPatron_2
    571                }                                   
    572            
    573          }  
   \                     ??LCDEraseBlock_24:
   \   0000AC 1008                  ADDW      SP, #0x8
   \   0000AE C2                    POP       BC
   \   0000AF D7                    RET       
   \   0000B0                       REQUIRE ?CLRL78_V1_0_L00
    574          //***********************************************************************************
    575          //void LCDString (const char *aStr, uint8_t aX, uint8_t aY)
    576          //{
    577          //    GlyphSetXY (G_lcd, aX, aY);
    578           //   GlyphString(G_lcd, (uint8_t *)aStr, strlen(aStr));
    579          //}
    580          
    581          //*************************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    582          void LCDFont (LCDFONT  font)
   \                     LCDFont:
    583          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
    584            
    585              
    586             /*         switch (font) {
    587                      #ifdef USE_GLYPH_FONT_BITMAP
    588                          case GLYPH_FONT_BITMAP:
    589                              p_gw->iLCDAPI->iFont = Bitmaps_table ;
    590                              break ;
    591                      #endif
    592                      #ifdef USE_GLYPH_FONT_HELVR10
    593                          case GLYPH_FONT_HELVR10:
    594                              p_gw->iLCDAPI->iFont = FontHelvr10_table ;
    595                              break ;
    596                      #endif
    597                      #ifdef USE_GLYPH_FONT_8_BY_16
    598                          case GLYPH_FONT_8_BY_16:
    599                              p_gw->iLCDAPI->iFont = Font8x16_table ;
    600                              break ;
    601                      #endif
    602                      #ifdef USE_GLYPH_FONT_8_BY_8
    603                          case GLYPH_FONT_8_BY_8:
    604                              p_gw->iLCDAPI->iFont = Font8x8_table ;
    605                              break ;
    606                      #endif
    607                      #ifdef USE_GLYPH_FONT_WINFREE
    608                          case GLYPH_FONT_WINFREESYSTEM14_BY_16:
    609                              p_gw->iLCDAPI->iFont = FontWinFreeSystem14x16_table ;
    610                              break ;
    611                      #endif
    612                      #ifdef USE_GLYPH_FONT_5_BY_7
    613                          case GLYPH_FONT_5_BY_7:
    614                              p_gw->iLCDAPI->iFont = Fontx5x7_table ;
    615                              break ;
    616                      #endif
    617                      #ifdef USE_GLYPH_FONT_6_BY_13
    618                          case GLYPH_FONT_6_BY_13:
    619                              p_gw->iLCDAPI->iFont = Fontx6x13_table ;
    620                              break ;
    621                      #endif
    622          			#ifdef USE_GLYPH_FONT_LOGOS
    623                          case GLYPH_FONT_LOGOS:
    624                              p_gw->iLCDAPI->iFont = Logos_table ;
    625                              break ;
    626                      #endif
    627                      }
    628            
    629              */
    630            
    631              
    632              switch (font) {
   \   000000 D1                    CMP0      A
   \   000001 DD30                  BZ        ??LCDEraseBlock_25
   \   000003 91                    DEC       A
   \   000004 DD1A                  BZ        ??LCDEraseBlock_26
   \   000006 91                    DEC       A
   \   000007 DD04                  BZ        ??LCDEraseBlock_27
   \   000009 91                    DEC       A
   \   00000A DD3A                  BZ        ??LCDEraseBlock_28
   \   00000C D7                    RET       
    633                  case FONT_LOGOS:
    634                                   iFont=Logos_table;
   \                     ??LCDEraseBlock_27:
   \   00000D 30....                MOVW      AX, #Logos_table
   \   000010 BF....                MOVW      N:iFont, AX
    635          			 G_CharWidth = 16u;
   \   000013 301000                MOVW      AX, #0x10
   \   000016 BF....                MOVW      N:G_CharWidth, AX
    636          			 G_CharHeight = 16u;
   \   000019 301000                MOVW      AX, #0x10
   \   00001C BF....                MOVW      N:G_CharHeight, AX
    637                       break;
   \   00001F D7                    RET       
    638          
    639                  case FONT_LARGE:
    640                                   iFont = Font8x8_table;
   \                     ??LCDEraseBlock_26:
   \   000020 30....                MOVW      AX, #Font8x8_table
   \   000023 BF....                MOVW      N:iFont, AX
    641          			 G_CharWidth = 8u;
   \   000026 300800                MOVW      AX, #0x8
   \   000029 BF....                MOVW      N:G_CharWidth, AX
    642          			 G_CharHeight = 8u;
   \   00002C 300800                MOVW      AX, #0x8
   \   00002F BF....                MOVW      N:G_CharHeight, AX
    643                       break;
   \   000032 D7                    RET       
    644          
    645                  case FONT_SMALL:
    646                                   iFont = Fontx5x7_table;
   \                     ??LCDEraseBlock_25:
   \   000033 30....                MOVW      AX, #Fontx5x7_table
   \   000036 BF....                MOVW      N:iFont, AX
    647          			 G_CharWidth = 5u;
   \   000039 300500                MOVW      AX, #0x5
   \   00003C BF....                MOVW      N:G_CharWidth, AX
    648          			 G_CharHeight = 7u;
   \   00003F 300700                MOVW      AX, #0x7
   \   000042 BF....                MOVW      N:G_CharHeight, AX
    649                       break;
   \   000045 D7                    RET       
    650                       
    651                       
    652              case  FONT_HELVR10:
    653                                   iFont = FontHelvr10_table; // width=3, height=14
   \                     ??LCDEraseBlock_28:
   \   000046 30....                MOVW      AX, #FontHelvr10_table
   \   000049 BF....                MOVW      N:iFont, AX
    654          			 G_CharWidth =  3u;
   \   00004C 300300                MOVW      AX, #0x3
   \   00004F BF....                MOVW      N:G_CharWidth, AX
    655          			 G_CharHeight = 14u;
   \   000052 300E00                MOVW      AX, #0xE
   \   000055 BF....                MOVW      N:G_CharHeight, AX
    656                
    657              }
    658          }
   \   000058 D7                    RET       
   \   000059                       REQUIRE ?CLRL78_V1_0_L00
    659          //***************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    660          void LCDSetXY (uint8_t x, uint8_t y)
   \                     LCDSetXY:
    661          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
    662            
    663            CharX_Position = x;
   \   000000 70                    MOV       X, A
   \   000001 F1                    CLRB      A
   \   000002 BF....                MOVW      N:CharX_Position, AX
    664            CharY_Position = y;
   \   000005 63                    MOV       A, B
   \   000006 70                    MOV       X, A
   \   000007 F1                    CLRB      A
   \   000008 BF....                MOVW      N:CharY_Position, AX
    665           
    666            
    667          } 
   \   00000B D7                    RET       
   \   00000C                       REQUIRE ?CLRL78_V1_0_L00
    668           
    669          //****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    670          void LCD_Char(char aChar)
   \                     LCD_Char:
    671          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001 C5                    PUSH      DE
   \   000002                       ; Auto size: 12
   \   000002 200C                  SUBW      SP, #0xC
    672            
    673            
    674            /*  const uint8_t *data = Fontx5x7_table[(int)aChar];
    675              for (i = 0; i < 5; i++)
    676              {
    677                   DataSend(data[i + 2]);
    678              }*/
    679            
    680              const uint8_t *p_char;
    681              const uint8_t *p_charData;
    682              uint32_t page;
    683              uint8_t width;
    684              uint8_t height;
    685              uint32_t column;
    686              uint8_t debug_i=0;
   \   000004 5500                  MOV       D, #0x0
    687              
    688                    
    689                      p_char = iFont[aChar];
   \   000006 70                    MOV       X, A
   \   000007 F1                    CLRB      A
   \   000008 320200                MOVW      BC, #0x2
   \   00000B FD....                CALL      N:?I_MUL_L02
   \   00000E FB....                MOVW      HL, N:iFont
   \   000011 07                    ADDW      AX, HL
   \   000012 16                    MOVW      HL, AX
   \   000013 AB                    MOVW      AX, [HL]
   \   000014 B804                  MOVW      [SP+0x04], AX
    690                      width = p_char[0];
   \   000016 A804                  MOVW      AX, [SP+0x04]
   \   000018 16                    MOVW      HL, AX
   \   000019 8B                    MOV       A, [HL]
   \   00001A 9800                  MOV       [SP], A
    691                      height = p_char[1];
   \   00001C A804                  MOVW      AX, [SP+0x04]
   \   00001E 16                    MOVW      HL, AX
   \   00001F A7                    INCW      HL
   \   000020 8B                    MOV       A, [HL]
   \   000021 74                    MOV       E, A
    692                      p_charData = &p_char[2];
   \   000022 A804                  MOVW      AX, [SP+0x04]
   \   000024 A1                    INCW      AX
   \   000025 A1                    INCW      AX
   \   000026 B802                  MOVW      [SP+0x02], AX
    693                      for (page=0; page<height; page+=8)  {
   \   000028 AEF8                  MOVW      AX, SP
   \   00002A 040400                ADDW      AX, #0x4
   \   00002D 16                    MOVW      HL, AX
   \   00002E F6                    CLRW      AX
   \   00002F BB                    MOVW      [HL], AX
   \   000030 F6                    CLRW      AX
   \   000031 BC02                  MOVW      [HL+0x02], AX
   \   000033 EF5F                  BR        S:??LCDEraseBlock_29
    694                          debug_i=((CharY_Position+page) >> 3);
    695                          ST7579_SetPage(debug_i);
    696                          ST7579_SetChar(CharX_Position);
    697                          for (column=0; column<width; column++, p_charData++)    {
    698                                 DataSend(*p_charData);
   \                     ??LCD_Char_0:
   \   000035 A802                  MOVW      AX, [SP+0x02]
   \   000037 16                    MOVW      HL, AX
   \   000038 8B                    MOV       A, [HL]
   \   000039 FD....                CALL      DataSend
    699                          }
   \   00003C AEF8                  MOVW      AX, SP
   \   00003E 040800                ADDW      AX, #0x8
   \   000041 16                    MOVW      HL, AX
   \   000042 AC02                  MOVW      AX, [HL+0x02]
   \   000044 12                    MOVW      BC, AX
   \   000045 AB                    MOVW      AX, [HL]
   \   000046 040100                ADDW      AX, #0x1
   \   000049 61D8                  SKNC
   \   00004B A3                    INCW      BC
   \                     ??LCD_Char_1:
   \   00004C 33                    XCHW      AX, BC
   \   00004D 040000                ADDW      AX, #0x0
   \   000050 33                    XCHW      AX, BC
   \   000051 16                    MOVW      HL, AX
   \   000052 AEF8                  MOVW      AX, SP
   \   000054 040800                ADDW      AX, #0x8
   \   000057 37                    XCHW      AX, HL
   \   000058 BB                    MOVW      [HL], AX
   \   000059 13                    MOVW      AX, BC
   \   00005A BC02                  MOVW      [HL+0x02], AX
   \   00005C 12                    MOVW      BC, AX
   \   00005D A802                  MOVW      AX, [SP+0x02]
   \   00005F A1                    INCW      AX
   \   000060 B802                  MOVW      [SP+0x02], AX
   \                     ??LCD_Char_2:
   \   000062 8800                  MOV       A, [SP]
   \   000064 70                    MOV       X, A
   \   000065 F1                    CLRB      A
   \   000066 F7                    CLRW      BC
   \   000067 C3                    PUSH      BC
   \   000068 C1                    PUSH      AX
   \   000069 A80E                  MOVW      AX, [SP+0x0E]
   \   00006B 12                    MOVW      BC, AX
   \   00006C A80C                  MOVW      AX, [SP+0x0C]
   \   00006E FD....                CALL      N:?UL_CMP_L03
   \   000071 DCC2                  BC        ??LCD_Char_0
   \   000073 AEF8                  MOVW      AX, SP
   \   000075 040400                ADDW      AX, #0x4
   \   000078 16                    MOVW      HL, AX
   \   000079 AC02                  MOVW      AX, [HL+0x02]
   \   00007B 12                    MOVW      BC, AX
   \   00007C AB                    MOVW      AX, [HL]
   \   00007D 040800                ADDW      AX, #0x8
   \   000080 61D8                  SKNC
   \   000082 A3                    INCW      BC
   \                     ??LCD_Char_3:
   \   000083 33                    XCHW      AX, BC
   \   000084 040000                ADDW      AX, #0x0
   \   000087 33                    XCHW      AX, BC
   \   000088 16                    MOVW      HL, AX
   \   000089 AEF8                  MOVW      AX, SP
   \   00008B 040400                ADDW      AX, #0x4
   \   00008E 37                    XCHW      AX, HL
   \   00008F BB                    MOVW      [HL], AX
   \   000090 13                    MOVW      AX, BC
   \   000091 BC02                  MOVW      [HL+0x02], AX
   \   000093 12                    MOVW      BC, AX
   \                     ??LCDEraseBlock_29:
   \   000094 64                    MOV       A, E
   \   000095 70                    MOV       X, A
   \   000096 F1                    CLRB      A
   \   000097 F7                    CLRW      BC
   \   000098 C3                    PUSH      BC
   \   000099 C1                    PUSH      AX
   \   00009A A80A                  MOVW      AX, [SP+0x0A]
   \   00009C 12                    MOVW      BC, AX
   \   00009D A808                  MOVW      AX, [SP+0x08]
   \   00009F FD....                CALL      N:?UL_CMP_L03
   \   0000A2 DE2A                  BNC       ??LCDEraseBlock_30
   \   0000A4 AEF8                  MOVW      AX, SP
   \   0000A6 040400                ADDW      AX, #0x4
   \   0000A9 16                    MOVW      HL, AX
   \   0000AA AC02                  MOVW      AX, [HL+0x02]
   \   0000AC 12                    MOVW      BC, AX
   \   0000AD AB                    MOVW      AX, [HL]
   \   0000AE 02....                ADDW      AX, N:CharY_Position
   \   0000B1 313E                  SHRW      AX, 0x3
   \   0000B3 60                    MOV       A, X
   \   0000B4 75                    MOV       D, A
   \   0000B5 70                    MOV       X, A
   \   0000B6 65                    MOV       A, D
   \   0000B7 FD....                CALL      ST7579_SetPage
   \   0000BA AF....                MOVW      AX, N:CharX_Position
   \   0000BD 60                    MOV       A, X
   \   0000BE FD....                CALL      ST7579_SetChar
   \   0000C1 AEF8                  MOVW      AX, SP
   \   0000C3 040800                ADDW      AX, #0x8
   \   0000C6 16                    MOVW      HL, AX
   \   0000C7 F6                    CLRW      AX
   \   0000C8 BB                    MOVW      [HL], AX
   \   0000C9 F6                    CLRW      AX
   \   0000CA BC02                  MOVW      [HL+0x02], AX
   \   0000CC EF94                  BR        S:??LCD_Char_2
    700                      }
    701          	 CharX_Position += width;  
   \                     ??LCDEraseBlock_30:
   \   0000CE 8800                  MOV       A, [SP]
   \   0000D0 70                    MOV       X, A
   \   0000D1 F1                    CLRB      A
   \   0000D2 02....                ADDW      AX, N:CharX_Position
   \   0000D5 BF....                MOVW      N:CharX_Position, AX
    702           
    703            
    704          }  
   \   0000D8 100C                  ADDW      SP, #0xC
   \   0000DA C4                    POP       DE
   \   0000DB C2                    POP       BC
   \   0000DC D7                    RET       
   \   0000DD                       REQUIRE ?CLRL78_V1_0_L00
    705          //****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    706          void LCDString(const char* str,uint8_t x,uint8_t y)
   \                     LCDString:
    707          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE
   \   000001 C1                    PUSH      AX
   \   000002                       ; Auto size: 2
   \   000002 63                    MOV       A, B
   \   000003 70                    MOV       X, A
   \   000004 63                    MOV       A, B
   \   000005 62                    MOV       A, C
   \   000006 73                    MOV       B, A
   \   000007 72                    MOV       C, A
    708            
    709            int nIndex = 0 ;
   \   000008 340000                MOVW      DE, #0x0
    710          
    711              LCDSetXY(x,y);
   \   00000B 60                    MOV       A, X
   \   00000C FD....                CALL      LCDSetXY
   \   00000F EF0B                  BR        S:??LCDEraseBlock_31
    712              while (nIndex < strlen(str))
    713              {
    714                  LCD_Char( str[nIndex]) ;
   \                     ??LCDString_0:
   \   000011 A800                  MOVW      AX, [SP]
   \   000013 16                    MOVW      HL, AX
   \   000014 17                    MOVW      AX, HL
   \   000015 05                    ADDW      AX, DE
   \   000016 16                    MOVW      HL, AX
   \   000017 8B                    MOV       A, [HL]
   \   000018 FD....                CALL      LCD_Char
    715                  nIndex++ ;
   \   00001B A5                    INCW      DE
    716              }
   \                     ??LCDEraseBlock_31:
   \   00001C A800                  MOVW      AX, [SP]
   \   00001E FD....                CALL      strlen
   \   000021 45                    CMPW      AX, DE
   \   000022 61E8                  SKZ
   \   000024 DEEB                  BNC       ??LCDString_0
    717          
    718            
    719          }
   \                     ??LCDString_1:
   \   000026 1002                  ADDW      SP, #0x2
   \   000028 C4                    POP       DE
   \   000029 D7                    RET       
   \   00002A                       REQUIRE ?CLRL78_V1_0_L00
    720          //****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    721          void LCDStringPos (const char *aStr, uint8_t aPos, uint8_t aY)
   \                     LCDStringPos:
    722          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE
   \   000001                       ; Auto size: 0
   \   000001 16                    MOVW      HL, AX
   \   000002 63                    MOV       A, B
    723             unsigned char  x = aPos  * G_CharWidth;
   \   000003 EB....                MOVW      DE, N:G_CharWidth
   \   000006 618C                  XCH       A, E
   \   000008 70                    MOV       X, A
   \   000009 64                    MOV       A, E
   \   00000A D6                    MULU      X
   \   00000B 60                    MOV       A, X
   \   00000C 70                    MOV       X, A
    724             LCDString(aStr, x, aY);
   \   00000D 60                    MOV       A, X
   \   00000E 73                    MOV       B, A
   \   00000F 17                    MOVW      AX, HL
   \   000010 FD....                CALL      LCDString
    725          }
   \   000013 C4                    POP       DE
   \   000014 D7                    RET       
   \   000015                       REQUIRE ?CLRL78_V1_0_L00
    726          //****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    727          void  LCDPrintf(uint8_t aLine, uint8_t aPos, char *aFormat, ...)
   \                     LCDPrintf:
    728          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001 C3                    PUSH      BC
   \   000002                       ; Auto size: 106
   \   000002 2068                  SUBW      SP, #0x68
   \   000004 C5                    PUSH      DE
   \   000005 C6                    POP       HL
    729              unsigned char  y;
    730              char buffer[100];
    731              va_list marker;
    732              
    733          	y = aLine * G_CharHeight;
   \   000006 EB....                MOVW      DE, N:G_CharHeight
   \   000009 618C                  XCH       A, E
   \   00000B 70                    MOV       X, A
   \   00000C 64                    MOV       A, E
   \   00000D D6                    MULU      X
   \   00000E 60                    MOV       A, X
   \   00000F 70                    MOV       X, A
   \   000010 60                    MOV       A, X
   \   000011 9800                  MOV       [SP], A
   \   000013 70                    MOV       X, A
    734          	
    735              // Convert to a string for output
    736              va_start(marker, aFormat);
   \   000014 AEF8                  MOVW      AX, SP
   \   000016 047000                ADDW      AX, #0x70
   \   000019 B802                  MOVW      [SP+0x02], AX
    737              vsprintf(buffer, aFormat, marker);
   \   00001B A802                  MOVW      AX, [SP+0x02]
   \   00001D 14                    MOVW      DE, AX
   \   00001E C7                    PUSH      HL
   \   00001F C2                    POP       BC
   \   000020 AEF8                  MOVW      AX, SP
   \   000022 040400                ADDW      AX, #0x4
   \   000025 FD....                CALL      vsprintf
    738              va_end(marker);
    739              
    740              LCDString(buffer, aPos, y);
   \   000028 8800                  MOV       A, [SP]
   \   00002A 72                    MOV       C, A
   \   00002B 8869                  MOV       A, [SP+0x69]
   \   00002D 73                    MOV       B, A
   \   00002E AEF8                  MOVW      AX, SP
   \   000030 040400                ADDW      AX, #0x4
   \   000033 FD....                CALL      LCDString
    741          }
   \   000036 106A                  ADDW      SP, #0x6A
   \   000038 C2                    POP       BC
   \   000039 D7                    RET       
   \   00003A                       REQUIRE ?CLRL78_V1_0_L00
    742          //****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    743          void LCDStringLine (const char *aStr, uint8_t aX, uint8_t aLine)
   \                     LCDStringLine:
    744          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX
    745          	uint8_t y = aLine * G_CharHeight;
   \   000001 AF....                MOVW      AX, N:G_CharHeight
   \   000004 60                    MOV       A, X
   \   000005 70                    MOV       X, A
   \   000006 62                    MOV       A, C
   \   000007 D6                    MULU      X
   \   000008 60                    MOV       A, X
   \   000009 72                    MOV       C, A
    746                  LCDString(aStr, aX, y);
   \   00000A 17                    MOVW      AX, HL
   \   00000B ED....                BR        N:LCDString
   \   00000E                       REQUIRE ?CLRL78_V1_0_L00
    747          }
    748          
    749          //*************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    750          uint8_t LCDCenter(uint8_t aStrLen)
   \                     LCDCenter:
    751          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C3                    PUSH      BC
   \   000001 C5                    PUSH      DE
   \   000002                       ; Auto size: 0
    752          	return (LCD_W-G_CharWidth*aStrLen)/2;
   \   000002 320200                MOVW      BC, #0x2
   \   000005 C3                    PUSH      BC
   \   000006 C6                    POP       HL
   \   000007 70                    MOV       X, A
   \   000008 F1                    CLRB      A
   \   000009 DB....                MOVW      BC, N:G_CharWidth
   \   00000C FD....                CALL      N:?I_MUL_L02
   \   00000F 14                    MOVW      DE, AX
   \   000010 306000                MOVW      AX, #0x60
   \   000013 25                    SUBW      AX, DE
   \   000014 C7                    PUSH      HL
   \   000015 C2                    POP       BC
   \   000016 FD....                CALL      N:?SI_DIV_L02
   \   000019 60                    MOV       A, X
   \   00001A C4                    POP       DE
   \   00001B C2                    POP       BC
   \   00001C D7                    RET       
   \   00001D                       REQUIRE ?CLRL78_V1_0_L00
    753          }
    754          //**********************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    755          uint8_t LCDRight(uint8_t aStrLen)
   \                     LCDRight:
    756          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 70                    MOV       X, A
    757          	return LCD_W - G_CharWidth * aStrLen;
   \   000001 FB....                MOVW      HL, N:G_CharWidth
   \   000004 66                    MOV       A, L
   \   000005 D6                    MULU      X
   \   000006 60                    MOV       A, X
   \   000007 70                    MOV       X, A
   \   000008 5160                  MOV       A, #0x60
   \   00000A 6128                  SUB       A, X
   \   00000C D7                    RET       
   \   00000D                       REQUIRE ?CLRL78_V1_0_L00
    758          }
    759          
    760          //****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    761          uint8_t No_Clobber_Axes(uint8_t cmd, uint32_t col, uint32_t line)
   \                     No_Clobber_Axes:
    762          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 8
   \   000000 C3                    PUSH      BC
   \   000001 C5                    PUSH      DE
   \   000002                       ; Auto size: 0
    763              uint8_t new_cmd = cmd;
   \   000002 75                    MOV       D, A
    764              
    765              if (col == ((LCD_W/2)-4))
   \   000003 AEF8                  MOVW      AX, SP
   \   000005 040800                ADDW      AX, #0x8
   \   000008 16                    MOVW      HL, AX
   \   000009 AC02                  MOVW      AX, [HL+0x02]
   \   00000B 12                    MOVW      BC, AX
   \   00000C AB                    MOVW      AX, [HL]
   \   00000D 33                    XCHW      AX, BC
   \   00000E 440000                CMPW      AX, #0x0
   \   000011 13                    MOVW      AX, BC
   \   000012 61F8                  SKNZ
   \   000014 442C00                CMPW      AX, #0x2C
   \                     ??No_Clobber_Axes_0:
   \   000017 DF04                  BNZ       ??LCDEraseBlock_32
    766                  new_cmd = 0xFF;     // Preserve the y-axis
   \   000019 55FF                  MOV       D, #0xFF
   \   00001B EF39                  BR        S:??LCDEraseBlock_33
    767              else if (line <= ((LCD_H/2)-4) && (line+8) >= ((LCD_H/2)-4))
   \                     ??LCDEraseBlock_32:
   \   00001D AEF8                  MOVW      AX, SP
   \   00001F 040C00                ADDW      AX, #0xC
   \   000022 16                    MOVW      HL, AX
   \   000023 AC02                  MOVW      AX, [HL+0x02]
   \   000025 12                    MOVW      BC, AX
   \   000026 AB                    MOVW      AX, [HL]
   \   000027 33                    XCHW      AX, BC
   \   000028 440000                CMPW      AX, #0x0
   \   00002B 13                    MOVW      AX, BC
   \   00002C 61F8                  SKNZ
   \   00002E 441D00                CMPW      AX, #0x1D
   \                     ??No_Clobber_Axes_1:
   \   000031 DE23                  BNC       ??LCDEraseBlock_33
   \   000033 AEF8                  MOVW      AX, SP
   \   000035 040C00                ADDW      AX, #0xC
   \   000038 16                    MOVW      HL, AX
   \   000039 AC02                  MOVW      AX, [HL+0x02]
   \   00003B 12                    MOVW      BC, AX
   \   00003C AB                    MOVW      AX, [HL]
   \   00003D 040800                ADDW      AX, #0x8
   \   000040 61D8                  SKNC
   \   000042 A3                    INCW      BC
   \                     ??No_Clobber_Axes_2:
   \   000043 33                    XCHW      AX, BC
   \   000044 040000                ADDW      AX, #0x0
   \   000047 440000                CMPW      AX, #0x0
   \   00004A 13                    MOVW      AX, BC
   \   00004B 61F8                  SKNZ
   \   00004D 441C00                CMPW      AX, #0x1C
   \                     ??No_Clobber_Axes_3:
   \   000050 DC04                  BC        ??LCDEraseBlock_33
    768                  new_cmd |= (1 << ((LCD_H/2)-4) % 8);
   \   000052 65                    MOV       A, D
   \   000053 6C10                  OR        A, #0x10
   \   000055 75                    MOV       D, A
    769              
    770              return new_cmd;
   \                     ??LCDEraseBlock_33:
   \   000056 65                    MOV       A, D
   \   000057 C4                    POP       DE
   \   000058 C2                    POP       BC
   \   000059 FD....                CALL      N:?FUNC_LEAVE_L06
   \   00005C 0800                  DW        0x8
   \   00005E                       REQUIRE ?CLRL78_V1_0_L00
    771          }
    772          
    773          
    774          
    775          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    776          void LCDDrawBlock(uint32_t aX1, uint32_t aY1, uint32_t aX2, uint32_t aY2)
   \                     LCDDrawBlock:
    777          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 12
   \   000000 C5                    PUSH      DE
   \   000001 C3                    PUSH      BC
   \   000002 C1                    PUSH      AX
   \   000003                       ; Auto size: 12
   \   000003 2008                  SUBW      SP, #0x8
    778            uint32_t line;
    779            uint32_t column;
    780            uint8_t cmd = 0xFF;
   \   000005 55FF                  MOV       D, #0xFF
    781            
    782             CharX_Position = aX1;
   \   000007 AEF8                  MOVW      AX, SP
   \   000009 040800                ADDW      AX, #0x8
   \   00000C 16                    MOVW      HL, AX
   \   00000D AC02                  MOVW      AX, [HL+0x02]
   \   00000F 12                    MOVW      BC, AX
   \   000010 AB                    MOVW      AX, [HL]
   \   000011 BF....                MOVW      N:CharX_Position, AX
    783             CharY_Position = aY1;
   \   000014 AEF8                  MOVW      AX, SP
   \   000016 041200                ADDW      AX, #0x12
   \   000019 16                    MOVW      HL, AX
   \   00001A AC02                  MOVW      AX, [HL+0x02]
   \   00001C 12                    MOVW      BC, AX
   \   00001D AB                    MOVW      AX, [HL]
   \   00001E BF....                MOVW      N:CharY_Position, AX
    784             CharX2_Position= aX2;
   \   000021 AEF8                  MOVW      AX, SP
   \   000023 041600                ADDW      AX, #0x16
   \   000026 16                    MOVW      HL, AX
   \   000027 AC02                  MOVW      AX, [HL+0x02]
   \   000029 12                    MOVW      BC, AX
   \   00002A AB                    MOVW      AX, [HL]
   \   00002B BF....                MOVW      N:CharX2_Position, AX
   \   00002E 13                    MOVW      AX, BC
   \   00002F BF....                MOVW      N:CharX2_Position+2, AX
   \   000032 12                    MOVW      BC, AX
    785             CharY2_Position= aY2;
   \   000033 AEF8                  MOVW      AX, SP
   \   000035 041A00                ADDW      AX, #0x1A
   \   000038 16                    MOVW      HL, AX
   \   000039 AC02                  MOVW      AX, [HL+0x02]
   \   00003B 12                    MOVW      BC, AX
   \   00003C AB                    MOVW      AX, [HL]
   \   00003D BF....                MOVW      N:CharY2_Position, AX
   \   000040 13                    MOVW      AX, BC
   \   000041 BF....                MOVW      N:CharY2_Position+2, AX
   \   000044 12                    MOVW      BC, AX
    786            
    787                              line = CharY_Position - (CharY_Position % 8);   // Gets the nearest block boundary
   \   000045 320800                MOVW      BC, #0x8
   \   000048 AF....                MOVW      AX, N:CharY_Position
   \   00004B FD....                CALL      N:?SI_MOD_L02
   \   00004E 16                    MOVW      HL, AX
   \   00004F AF....                MOVW      AX, N:CharY_Position
   \   000052 27                    SUBW      AX, HL
   \   000053 12                    MOVW      BC, AX
   \   000054 31FF                  SARW      AX, 0xF
   \   000056 33                    XCHW      AX, BC
   \   000057 FBF8FF                MOVW      HL, SP
   \   00005A BB                    MOVW      [HL], AX
   \   00005B 13                    MOVW      AX, BC
   \   00005C BC02                  MOVW      [HL+0x02], AX
   \   00005E 12                    MOVW      BC, AX
    788                              cmd = 0xFF;
   \   00005F 51FF                  MOV       A, #0xFF
   \   000061 75                    MOV       D, A
    789                              
    790                              if (CharY_Position < (line + 8))
   \   000062 AEF8                  MOVW      AX, SP
   \   000064 16                    MOVW      HL, AX
   \   000065 AC02                  MOVW      AX, [HL+0x02]
   \   000067 12                    MOVW      BC, AX
   \   000068 AB                    MOVW      AX, [HL]
   \   000069 040800                ADDW      AX, #0x8
   \   00006C 61D8                  SKNC
   \   00006E A3                    INCW      BC
   \                     ??LCDDrawBlock_0:
   \   00006F 33                    XCHW      AX, BC
   \   000070 040000                ADDW      AX, #0x0
   \   000073 33                    XCHW      AX, BC
   \   000074 C3                    PUSH      BC
   \   000075 C1                    PUSH      AX
   \   000076 AF....                MOVW      AX, N:CharY_Position
   \   000079 12                    MOVW      BC, AX
   \   00007A 31FF                  SARW      AX, 0xF
   \   00007C 33                    XCHW      AX, BC
   \   00007D FD....                CALL      N:?UL_CMP_L03
   \   000080 61C8                  SKC
   \   000082 ED....                BR        N:??LCDEraseBlock_34
    791                                      cmd &= (0xFF << (CharY_Position - line));
   \   000085 8800                  MOV       A, [SP]
   \   000087 73                    MOV       B, A
   \   000088 AF....                MOVW      AX, N:CharY_Position
   \   00008B 60                    MOV       A, X
   \   00008C 612B                  SUB       A, B
   \   00008E 72                    MOV       C, A
   \   00008F 30FF00                MOVW      AX, #0xFF
   \   000092 FD....                CALL      N:?I_LSH_L02
   \   000095 65                    MOV       A, D
   \   000096 6158                  AND       A, X
   \   000098 75                    MOV       D, A
   \   000099 EF6F                  BR        S:??LCDEraseBlock_34
    792                              
    793                              for ( ; line<=CharY2_Position; line+=8) {
    794                                  
    795                                  ST7579_SetPage( line/8);
    796                                  ST7579_SetChar(CharX_Position);
    797                                 
    798                                  if ((line+8) > CharY2_Position) /* If we're ending midway through a line */
    799                                      cmd &= (0xFF >> ((line+7) - CharY2_Position));
    800                                  
    801                                  /* This code fills in the row column by column, one px at a time */
    802                                  for (column=CharX_Position; column<=CharX2_Position; column++)    {
    803                                      DataSend(No_Clobber_Axes(cmd, column, line));
   \                     ??LCDDrawBlock_1:
   \   00009B AEF8                  MOVW      AX, SP
   \   00009D 16                    MOVW      HL, AX
   \   00009E AC02                  MOVW      AX, [HL+0x02]
   \   0000A0 12                    MOVW      BC, AX
   \   0000A1 AB                    MOVW      AX, [HL]
   \   0000A2 C3                    PUSH      BC
   \   0000A3 C1                    PUSH      AX
   \   0000A4 AEF8                  MOVW      AX, SP
   \   0000A6 040800                ADDW      AX, #0x8
   \   0000A9 16                    MOVW      HL, AX
   \   0000AA AC02                  MOVW      AX, [HL+0x02]
   \   0000AC 12                    MOVW      BC, AX
   \   0000AD AB                    MOVW      AX, [HL]
   \   0000AE C3                    PUSH      BC
   \   0000AF C1                    PUSH      AX
   \   0000B0 65                    MOV       A, D
   \   0000B1 FD....                CALL      No_Clobber_Axes
   \   0000B4 FD....                CALL      DataSend
    804                                  }
   \   0000B7 AEF8                  MOVW      AX, SP
   \   0000B9 040400                ADDW      AX, #0x4
   \   0000BC 16                    MOVW      HL, AX
   \   0000BD AC02                  MOVW      AX, [HL+0x02]
   \   0000BF 12                    MOVW      BC, AX
   \   0000C0 AB                    MOVW      AX, [HL]
   \   0000C1 040100                ADDW      AX, #0x1
   \   0000C4 61D8                  SKNC
   \   0000C6 A3                    INCW      BC
   \                     ??LCDDrawBlock_2:
   \   0000C7 33                    XCHW      AX, BC
   \   0000C8 040000                ADDW      AX, #0x0
   \   0000CB 33                    XCHW      AX, BC
   \   0000CC 16                    MOVW      HL, AX
   \   0000CD AEF8                  MOVW      AX, SP
   \   0000CF 040400                ADDW      AX, #0x4
   \   0000D2 37                    XCHW      AX, HL
   \   0000D3 BB                    MOVW      [HL], AX
   \   0000D4 13                    MOVW      AX, BC
   \   0000D5 BC02                  MOVW      [HL+0x02], AX
   \   0000D7 12                    MOVW      BC, AX
   \                     ??LCDDrawBlock_3:
   \   0000D8 AEF8                  MOVW      AX, SP
   \   0000DA 040400                ADDW      AX, #0x4
   \   0000DD 16                    MOVW      HL, AX
   \   0000DE AC02                  MOVW      AX, [HL+0x02]
   \   0000E0 C1                    PUSH      AX
   \   0000E1 AB                    MOVW      AX, [HL]
   \   0000E2 C1                    PUSH      AX
   \   0000E3 DB....                MOVW      BC, N:CharX2_Position+2
   \   0000E6 AF....                MOVW      AX, N:CharX2_Position
   \   0000E9 FD....                CALL      N:?UL_CMP_L03
   \   0000EC DEAD                  BNC       ??LCDDrawBlock_1
    805                                  
    806                                  cmd = 0xFF;
   \   0000EE 55FF                  MOV       D, #0xFF
   \   0000F0 AEF8                  MOVW      AX, SP
   \   0000F2 16                    MOVW      HL, AX
   \   0000F3 AC02                  MOVW      AX, [HL+0x02]
   \   0000F5 12                    MOVW      BC, AX
   \   0000F6 AB                    MOVW      AX, [HL]
   \   0000F7 040800                ADDW      AX, #0x8
   \   0000FA 61D8                  SKNC
   \   0000FC A3                    INCW      BC
   \                     ??LCDDrawBlock_4:
   \   0000FD 33                    XCHW      AX, BC
   \   0000FE 040000                ADDW      AX, #0x0
   \   000101 33                    XCHW      AX, BC
   \   000102 FBF8FF                MOVW      HL, SP
   \   000105 BB                    MOVW      [HL], AX
   \   000106 13                    MOVW      AX, BC
   \   000107 BC02                  MOVW      [HL+0x02], AX
   \   000109 12                    MOVW      BC, AX
   \                     ??LCDEraseBlock_34:
   \   00010A AEF8                  MOVW      AX, SP
   \   00010C 16                    MOVW      HL, AX
   \   00010D AC02                  MOVW      AX, [HL+0x02]
   \   00010F C1                    PUSH      AX
   \   000110 AB                    MOVW      AX, [HL]
   \   000111 C1                    PUSH      AX
   \   000112 DB....                MOVW      BC, N:CharY2_Position+2
   \   000115 AF....                MOVW      AX, N:CharY2_Position
   \   000118 FD....                CALL      N:?UL_CMP_L03
   \   00011B DC5E                  BC        ??LCDEraseBlock_35
   \   00011D AEF8                  MOVW      AX, SP
   \   00011F 16                    MOVW      HL, AX
   \   000120 AC02                  MOVW      AX, [HL+0x02]
   \   000122 12                    MOVW      BC, AX
   \   000123 AB                    MOVW      AX, [HL]
   \   000124 313E                  SHRW      AX, 0x3
   \   000126 60                    MOV       A, X
   \   000127 FD....                CALL      ST7579_SetPage
   \   00012A AF....                MOVW      AX, N:CharX_Position
   \   00012D 60                    MOV       A, X
   \   00012E FD....                CALL      ST7579_SetChar
   \   000131 AEF8                  MOVW      AX, SP
   \   000133 16                    MOVW      HL, AX
   \   000134 AC02                  MOVW      AX, [HL+0x02]
   \   000136 12                    MOVW      BC, AX
   \   000137 AB                    MOVW      AX, [HL]
   \   000138 040800                ADDW      AX, #0x8
   \   00013B 61D8                  SKNC
   \   00013D A3                    INCW      BC
   \                     ??LCDDrawBlock_5:
   \   00013E 33                    XCHW      AX, BC
   \   00013F 040000                ADDW      AX, #0x0
   \   000142 33                    XCHW      AX, BC
   \   000143 C3                    PUSH      BC
   \   000144 C1                    PUSH      AX
   \   000145 DB....                MOVW      BC, N:CharY2_Position+2
   \   000148 AF....                MOVW      AX, N:CharY2_Position
   \   00014B FD....                CALL      N:?UL_CMP_L03
   \   00014E DE15                  BNC       ??LCDEraseBlock_36
   \   000150 8F....                MOV       A, N:CharY2_Position
   \   000153 74                    MOV       E, A
   \   000154 8800                  MOV       A, [SP]
   \   000156 0C07                  ADD       A, #0x7
   \   000158 612C                  SUB       A, E
   \   00015A 72                    MOV       C, A
   \   00015B 30FF00                MOVW      AX, #0xFF
   \   00015E FD....                CALL      N:?SI_RSH_L02
   \   000161 65                    MOV       A, D
   \   000162 6158                  AND       A, X
   \   000164 75                    MOV       D, A
   \                     ??LCDEraseBlock_36:
   \   000165 AF....                MOVW      AX, N:CharX_Position
   \   000168 12                    MOVW      BC, AX
   \   000169 31FF                  SARW      AX, 0xF
   \   00016B 33                    XCHW      AX, BC
   \   00016C 16                    MOVW      HL, AX
   \   00016D AEF8                  MOVW      AX, SP
   \   00016F 040400                ADDW      AX, #0x4
   \   000172 37                    XCHW      AX, HL
   \   000173 BB                    MOVW      [HL], AX
   \   000174 13                    MOVW      AX, BC
   \   000175 BC02                  MOVW      [HL+0x02], AX
   \   000177 12                    MOVW      BC, AX
   \   000178 ED....                BR        N:??LCDDrawBlock_3
    807                              }
    808            
    809            
    810          }  
   \                     ??LCDEraseBlock_35:
   \   00017B 100C                  ADDW      SP, #0xC
   \   00017D C4                    POP       DE
   \   00017E FD....                CALL      N:?FUNC_LEAVE_L06
   \   000181 0C00                  DW        0xC
   \   000183                       REQUIRE ?CLRL78_V1_0_L00
    811          
    812          //*******************************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    813          void LCDEraseBlock(uint32_t aX1, uint32_t aY1, uint32_t aX2, uint32_t aY2)
   \                     LCDEraseBlock:
    814          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 12
   \   000000 C5                    PUSH      DE
   \   000001 C3                    PUSH      BC
   \   000002 C1                    PUSH      AX
   \   000003                       ; Auto size: 12
   \   000003 2008                  SUBW      SP, #0x8
    815            uint32_t line;
    816            uint32_t column;
    817             uint8_t cmd = 0xFF;
   \   000005 55FF                  MOV       D, #0xFF
    818            
    819            
    820              CharX_Position = aX1;
   \   000007 AEF8                  MOVW      AX, SP
   \   000009 040800                ADDW      AX, #0x8
   \   00000C 16                    MOVW      HL, AX
   \   00000D AC02                  MOVW      AX, [HL+0x02]
   \   00000F 12                    MOVW      BC, AX
   \   000010 AB                    MOVW      AX, [HL]
   \   000011 BF....                MOVW      N:CharX_Position, AX
    821              CharY_Position = aY1;
   \   000014 AEF8                  MOVW      AX, SP
   \   000016 041200                ADDW      AX, #0x12
   \   000019 16                    MOVW      HL, AX
   \   00001A AC02                  MOVW      AX, [HL+0x02]
   \   00001C 12                    MOVW      BC, AX
   \   00001D AB                    MOVW      AX, [HL]
   \   00001E BF....                MOVW      N:CharY_Position, AX
    822              CharX2_Position= aX2;
   \   000021 AEF8                  MOVW      AX, SP
   \   000023 041600                ADDW      AX, #0x16
   \   000026 16                    MOVW      HL, AX
   \   000027 AC02                  MOVW      AX, [HL+0x02]
   \   000029 12                    MOVW      BC, AX
   \   00002A AB                    MOVW      AX, [HL]
   \   00002B BF....                MOVW      N:CharX2_Position, AX
   \   00002E 13                    MOVW      AX, BC
   \   00002F BF....                MOVW      N:CharX2_Position+2, AX
   \   000032 12                    MOVW      BC, AX
    823              CharY2_Position= aY2;
   \   000033 AEF8                  MOVW      AX, SP
   \   000035 041A00                ADDW      AX, #0x1A
   \   000038 16                    MOVW      HL, AX
   \   000039 AC02                  MOVW      AX, [HL+0x02]
   \   00003B 12                    MOVW      BC, AX
   \   00003C AB                    MOVW      AX, [HL]
   \   00003D BF....                MOVW      N:CharY2_Position, AX
   \   000040 13                    MOVW      AX, BC
   \   000041 BF....                MOVW      N:CharY2_Position+2, AX
   \   000044 12                    MOVW      BC, AX
    824            
    825            
    826                              line =CharY_Position - (CharY_Position % 8);
   \   000045 320800                MOVW      BC, #0x8
   \   000048 AF....                MOVW      AX, N:CharY_Position
   \   00004B FD....                CALL      N:?SI_MOD_L02
   \   00004E 16                    MOVW      HL, AX
   \   00004F AF....                MOVW      AX, N:CharY_Position
   \   000052 27                    SUBW      AX, HL
   \   000053 12                    MOVW      BC, AX
   \   000054 31FF                  SARW      AX, 0xF
   \   000056 33                    XCHW      AX, BC
   \   000057 FBF8FF                MOVW      HL, SP
   \   00005A BB                    MOVW      [HL], AX
   \   00005B 13                    MOVW      AX, BC
   \   00005C BC02                  MOVW      [HL+0x02], AX
   \   00005E 12                    MOVW      BC, AX
    827                              cmd = 0x00;
   \   00005F F1                    CLRB      A
   \   000060 75                    MOV       D, A
    828                              
    829                              if (CharY_Position < (line + 8))
   \   000061 AEF8                  MOVW      AX, SP
   \   000063 16                    MOVW      HL, AX
   \   000064 AC02                  MOVW      AX, [HL+0x02]
   \   000066 12                    MOVW      BC, AX
   \   000067 AB                    MOVW      AX, [HL]
   \   000068 040800                ADDW      AX, #0x8
   \   00006B 61D8                  SKNC
   \   00006D A3                    INCW      BC
   \                     ??LCDEraseBlock_37:
   \   00006E 33                    XCHW      AX, BC
   \   00006F 040000                ADDW      AX, #0x0
   \   000072 33                    XCHW      AX, BC
   \   000073 C3                    PUSH      BC
   \   000074 C1                    PUSH      AX
   \   000075 AF....                MOVW      AX, N:CharY_Position
   \   000078 12                    MOVW      BC, AX
   \   000079 31FF                  SARW      AX, 0xF
   \   00007B 33                    XCHW      AX, BC
   \   00007C FD....                CALL      N:?UL_CMP_L03
   \   00007F 61C8                  SKC
   \   000081 ED....                BR        N:??LCDEraseBlock_38
    830                                      cmd &= (0xFF << (CharY_Position - line));
   \   000084 8800                  MOV       A, [SP]
   \   000086 73                    MOV       B, A
   \   000087 AF....                MOVW      AX, N:CharY_Position
   \   00008A 60                    MOV       A, X
   \   00008B 612B                  SUB       A, B
   \   00008D 72                    MOV       C, A
   \   00008E 30FF00                MOVW      AX, #0xFF
   \   000091 FD....                CALL      N:?I_LSH_L02
   \   000094 65                    MOV       A, D
   \   000095 6158                  AND       A, X
   \   000097 75                    MOV       D, A
   \   000098 EF6D                  BR        S:??LCDEraseBlock_38
    831                              
    832                              for ( ; line<=CharY2_Position; line+=8) {
    833                                  ST7579_SetPage( line/8);
    834                                  ST7579_SetChar(CharX_Position);
    835                                  for (column=CharX_Position; column<=CharX2_Position; column++)    {
    836                                      DataSend(No_Clobber_Axes(cmd, column, line));
   \                     ??LCDEraseBlock_39:
   \   00009A AEF8                  MOVW      AX, SP
   \   00009C 16                    MOVW      HL, AX
   \   00009D AC02                  MOVW      AX, [HL+0x02]
   \   00009F 12                    MOVW      BC, AX
   \   0000A0 AB                    MOVW      AX, [HL]
   \   0000A1 C3                    PUSH      BC
   \   0000A2 C1                    PUSH      AX
   \   0000A3 AEF8                  MOVW      AX, SP
   \   0000A5 040800                ADDW      AX, #0x8
   \   0000A8 16                    MOVW      HL, AX
   \   0000A9 AC02                  MOVW      AX, [HL+0x02]
   \   0000AB 12                    MOVW      BC, AX
   \   0000AC AB                    MOVW      AX, [HL]
   \   0000AD C3                    PUSH      BC
   \   0000AE C1                    PUSH      AX
   \   0000AF 65                    MOV       A, D
   \   0000B0 FD....                CALL      No_Clobber_Axes
   \   0000B3 FD....                CALL      DataSend
    837                                  }
   \   0000B6 AEF8                  MOVW      AX, SP
   \   0000B8 040400                ADDW      AX, #0x4
   \   0000BB 16                    MOVW      HL, AX
   \   0000BC AC02                  MOVW      AX, [HL+0x02]
   \   0000BE 12                    MOVW      BC, AX
   \   0000BF AB                    MOVW      AX, [HL]
   \   0000C0 040100                ADDW      AX, #0x1
   \   0000C3 61D8                  SKNC
   \   0000C5 A3                    INCW      BC
   \                     ??LCDEraseBlock_40:
   \   0000C6 33                    XCHW      AX, BC
   \   0000C7 040000                ADDW      AX, #0x0
   \   0000CA 33                    XCHW      AX, BC
   \   0000CB 16                    MOVW      HL, AX
   \   0000CC AEF8                  MOVW      AX, SP
   \   0000CE 040400                ADDW      AX, #0x4
   \   0000D1 37                    XCHW      AX, HL
   \   0000D2 BB                    MOVW      [HL], AX
   \   0000D3 13                    MOVW      AX, BC
   \   0000D4 BC02                  MOVW      [HL+0x02], AX
   \   0000D6 12                    MOVW      BC, AX
   \                     ??LCDEraseBlock_41:
   \   0000D7 AEF8                  MOVW      AX, SP
   \   0000D9 040400                ADDW      AX, #0x4
   \   0000DC 16                    MOVW      HL, AX
   \   0000DD AC02                  MOVW      AX, [HL+0x02]
   \   0000DF C1                    PUSH      AX
   \   0000E0 AB                    MOVW      AX, [HL]
   \   0000E1 C1                    PUSH      AX
   \   0000E2 DB....                MOVW      BC, N:CharX2_Position+2
   \   0000E5 AF....                MOVW      AX, N:CharX2_Position
   \   0000E8 FD....                CALL      N:?UL_CMP_L03
   \   0000EB DEAD                  BNC       ??LCDEraseBlock_39
   \   0000ED AEF8                  MOVW      AX, SP
   \   0000EF 16                    MOVW      HL, AX
   \   0000F0 AC02                  MOVW      AX, [HL+0x02]
   \   0000F2 12                    MOVW      BC, AX
   \   0000F3 AB                    MOVW      AX, [HL]
   \   0000F4 040800                ADDW      AX, #0x8
   \   0000F7 61D8                  SKNC
   \   0000F9 A3                    INCW      BC
   \                     ??LCDEraseBlock_42:
   \   0000FA 33                    XCHW      AX, BC
   \   0000FB 040000                ADDW      AX, #0x0
   \   0000FE 33                    XCHW      AX, BC
   \   0000FF FBF8FF                MOVW      HL, SP
   \   000102 BB                    MOVW      [HL], AX
   \   000103 13                    MOVW      AX, BC
   \   000104 BC02                  MOVW      [HL+0x02], AX
   \   000106 12                    MOVW      BC, AX
   \                     ??LCDEraseBlock_38:
   \   000107 AEF8                  MOVW      AX, SP
   \   000109 16                    MOVW      HL, AX
   \   00010A AC02                  MOVW      AX, [HL+0x02]
   \   00010C C1                    PUSH      AX
   \   00010D AB                    MOVW      AX, [HL]
   \   00010E C1                    PUSH      AX
   \   00010F DB....                MOVW      BC, N:CharY2_Position+2
   \   000112 AF....                MOVW      AX, N:CharY2_Position
   \   000115 FD....                CALL      N:?UL_CMP_L03
   \   000118 DC29                  BC        ??LCDEraseBlock_43
   \   00011A AEF8                  MOVW      AX, SP
   \   00011C 16                    MOVW      HL, AX
   \   00011D AC02                  MOVW      AX, [HL+0x02]
   \   00011F 12                    MOVW      BC, AX
   \   000120 AB                    MOVW      AX, [HL]
   \   000121 313E                  SHRW      AX, 0x3
   \   000123 60                    MOV       A, X
   \   000124 FD....                CALL      ST7579_SetPage
   \   000127 AF....                MOVW      AX, N:CharX_Position
   \   00012A 60                    MOV       A, X
   \   00012B FD....                CALL      ST7579_SetChar
   \   00012E AF....                MOVW      AX, N:CharX_Position
   \   000131 12                    MOVW      BC, AX
   \   000132 31FF                  SARW      AX, 0xF
   \   000134 33                    XCHW      AX, BC
   \   000135 16                    MOVW      HL, AX
   \   000136 AEF8                  MOVW      AX, SP
   \   000138 040400                ADDW      AX, #0x4
   \   00013B 37                    XCHW      AX, HL
   \   00013C BB                    MOVW      [HL], AX
   \   00013D 13                    MOVW      AX, BC
   \   00013E BC02                  MOVW      [HL+0x02], AX
   \   000140 12                    MOVW      BC, AX
   \   000141 EF94                  BR        S:??LCDEraseBlock_41
    838                              }
    839            
    840             
    841          } 
   \                     ??LCDEraseBlock_43:
   \   000143 100C                  ADDW      SP, #0xC
   \   000145 C4                    POP       DE
   \   000146 FD....                CALL      N:?FUNC_LEAVE_L06
   \   000149 0C00                  DW        0xC
   \   00014B                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for G_CharWidth>`:
   \   000000 0500                  DW 5

   \                                 In  segment NEAR_ID, align 2, align-sorted
   \                     `?<Initializer for G_CharHeight>`:
   \   000000 0700                  DW 7

   \                                 In  segment SWITCH, align 2
   \                     ??ST7579_SetSystemBiasBooster_0:
   \   000000 0000                  DW        0
   \   000002 1200                  DW        18
   \   000004 ....                  DW        ??ST7579_SetSystemBiasBooster_19
   \   000006 ....                  DW        ??ST7579_SetSystemBiasBooster_1
   \   000008 ....                  DW        ??ST7579_SetSystemBiasBooster_5
   \   00000A ....                  DW        ??ST7579_SetSystemBiasBooster_11
   \   00000C ....                  DW        ??ST7579_SetSystemBiasBooster_2
   \   00000E ....                  DW        ??ST7579_SetSystemBiasBooster_6
   \   000010 ....                  DW        ??ST7579_SetSystemBiasBooster_12
   \   000012 ....                  DW        ??ST7579_SetSystemBiasBooster_3
   \   000014 ....                  DW        ??ST7579_SetSystemBiasBooster_7
   \   000016 ....                  DW        ??ST7579_SetSystemBiasBooster_13
   \   000018 ....                  DW        ??ST7579_SetSystemBiasBooster_4
   \   00001A ....                  DW        ??ST7579_SetSystemBiasBooster_8
   \   00001C ....                  DW        ??ST7579_SetSystemBiasBooster_14
   \   00001E ....                  DW        ??ST7579_SetSystemBiasBooster_9
   \   000020 ....                  DW        ??ST7579_SetSystemBiasBooster_15
   \   000022 ....                  DW        ??ST7579_SetSystemBiasBooster_10
   \   000024 ....                  DW        ??ST7579_SetSystemBiasBooster_16
   \   000026 ....                  DW        ??ST7579_SetSystemBiasBooster_17
   \   000028 ....                  DW        ??ST7579_SetSystemBiasBooster_18

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "">`:
   \   000000 00                    DB ""
   \   000001 000000000000          DB 0, 0, 0, 0, 0, 0, 0, 0, 0
    842          /*
    843          
    844          void LCDClearLine (uint8_t aLine)
    845          {
    846              uint8_t y = aLine * G_CharHeight;
    847          
    848              GlyphEraseBlock(G_lcd, 0u, y, 95u, y + 7u);
    849          }
    850          
    851          
    852          
    853          void LCDStringLine (const char *aStr, uint8_t aX, uint8_t aLine)
    854          {
    855          	uint8_t y = aLine * G_CharHeight;
    856                  LCDString(aStr, aX, y);
    857          }
    858          
    859          void LCDStringPos (const char *aStr, uint8_t aPos, uint8_t aY)
    860          {
    861              uint8_t  x = aPos  * G_CharWidth;
    862              LCDString(aStr, x, aY);
    863          }
    864          
    865          void LCDStringLinePos (const char *aStr, uint8_t aPos, uint8_t aLine)
    866          {
    867              uint8_t  x = aPos  * G_CharWidth;
    868              LCDStringLine(aStr, x, aLine);
    869          }
    870          
    871          void LCDStringAlign(const char *aStr, T_LCD_ALIGN aAlign, uint8_t aY)
    872          {
    873          	uint8_t x;
    874          	switch(aAlign)
    875          	{
    876          		case LEFT:
    877          			x = 0;
    878          		break;
    879          		case RIGHT:
    880          			x = LCD_W - strlen(aStr)*G_CharWidth;
    881          		break;
    882          		case CENTER:
    883          			x = LCD_W/2 - strlen(aStr)*G_CharWidth/2;
    884          		break;
    885          		default:
    886          		break;
    887          	}
    888          	
    889          	LCDString(aStr, x, aY);
    890          }
    891          
    892          void LCDChar(char aChar, uint8_t aX, uint8_t aLine)
    893          {
    894              uint8_t  y = aLine * G_CharHeight;
    895          	
    896          	GlyphSetXY (G_lcd, aX, y);
    897              GlyphChar(G_lcd, (uint32_t)aChar);  
    898          }
    899          
    900          void LCDCharPos(char aChar, uint8_t aPos, uint8_t aLine)
    901          {
    902              uint8_t  x;
    903              uint8_t  y;
    904          
    905              x = aPos  * G_CharWidth;
    906              y = aLine * G_CharHeight;
    907          	
    908          	GlyphSetXY (G_lcd, x, y);
    909              GlyphChar(G_lcd, (uint32_t)aChar);  
    910          }
    911          
    912          void  LCDPrintf(uint8_t aLine, uint8_t aPos, char *aFormat, ...)
    913          {
    914              uint8_t  y;
    915              char buffer[100];
    916              va_list marker;
    917              
    918          	y = aLine * G_CharHeight;
    919          	
    920              // Convert to a string for output
    921              va_start(marker, aFormat);
    922              vsprintf(buffer, aFormat, marker);
    923              va_end(marker);
    924              
    925              LCDStringPos(buffer, aPos, y);
    926          }
    927          
    928          void  LCDTest()
    929          {
    930          	GlyphClearScreen(G_lcd);
    931          	GlyphDrawTestPattern(G_lcd);
    932          }
    933          
    934          void  LCDInvert()
    935          {
    936          	GlyphInvertScreen(G_lcd);
    937          }
    938          
    939          uint8_t LCDCenter(uint8_t aStrLen)
    940          {
    941          	return (LCD_W-G_CharWidth*aStrLen)/2;
    942          }
    943          uint8_t LCDRight(uint8_t aStrLen)
    944          {
    945          	return LCD_W - G_CharWidth * aStrLen;
    946          }
    947          
    948          
    949            */
    950            
    951            
    952          
    953          
    954          

   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     _A_P1                              1
     _A_PM1                             1
     G_CharWidth                        2
     G_CharHeight                       2
     iFont                              2
     CharX_Position                     2
     CharY_Position                     2
     CharX2_Position                    4
     CharY2_Position                    4
     SPI_Send                          49
     SPI_SendReceive                   50
     CommandSend                       38
     DataSend                          32
     ST7579_SetVO_Range                94
     ST7579_SetSystemBiasBooster      158
     ST7579_SetFrameRate              125
     ST7579_SetPage                    26
     ST7579_SetChar                    24
     ST7579_SetLine                   187
     ST7579_Send16bitsCommand          21
     ST7579_Config                     39
     LCDInit                           31
     LCDClear                         155
     LCDPatron                        176
     LCDFont                           89
     LCDSetXY                          12
     LCD_Char                         221
     LCDString                         42
     LCDStringPos                      21
     LCDPrintf                         58
     LCDStringLine                     14
     LCDCenter                         29
     LCDRight                          13
     No_Clobber_Axes                   94
     LCDDrawBlock                     387
     LCDEraseBlock                    331
     ?<Initializer for G_CharWidth>     2
     ?<Initializer for G_CharHeight>    2
     ??ST7579_SetSystemBiasBooster_0   42
     ?<Constant "">                    10

 
 2 516 bytes in segment CODE
     1 byte  in segment NEAR_A
    10 bytes in segment NEAR_CONST
     4 bytes in segment NEAR_I
     4 bytes in segment NEAR_ID
    14 bytes in segment NEAR_Z
     1 byte  in segment SADDR_A
    42 bytes in segment SWITCH
 
 2 516 bytes of CODE  memory
    56 bytes of CONST memory
    18 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
